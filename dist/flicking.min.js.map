{"version":3,"file":"flicking.min.js","sources":["../src/utils.ts","../src/const/error.ts","../src/const/external.ts","../src/core/FlickingError.ts","../src/core/Viewport.ts","../src/const/axes.ts","../src/control/states/State.ts","../src/control/states/IdleState.ts","../src/control/states/HoldingState.ts","../src/control/states/DraggingState.ts","../src/control/states/AnimatingState.ts","../src/control/states/DisabledState.ts","../src/control/StateMachine.ts","../src/control/AxesController.ts","../src/control/Control.ts","../src/core/AnchorPoint.ts","../src/control/SnapControl.ts","../src/control/FreeControl.ts","../src/control/StrictControl.ts","../src/camera/Camera.ts","../src/camera/LinearCamera.ts","../src/camera/CircularCamera.ts","../src/camera/BoundCamera.ts","../src/renderer/Renderer.ts","../src/core/panel/Panel.ts","../src/core/panel/ElementPanel.ts","../src/renderer/VanillaRenderer.ts","../src/renderer/ExternalRenderer.ts","../src/Flicking.ts","../src/core/panel/ExternalPanel.ts","../src/cfc/sync.ts","../src/cfc/getDefaultCameraTransform.ts","../src/cfc/withFlickingMethods.ts","../src/cfc/getRenderingPanels.ts","../src/index.umd.ts"],"sourcesContent":["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking, { FlickingOptions } from \"./Flicking\";\nimport FlickingError from \"./core/FlickingError\";\nimport * as ERROR from \"./const/error\";\nimport { ALIGN, DIRECTION } from \"./const/external\";\nimport { LiteralUnion, Merged, ValueOf } from \"./type/internal\";\nimport { ElementLike } from \"./type/external\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = <From extends object, To extends object>(target: From, ...sources: To[]): Merged<From, To> => {\n  sources.forEach(source => {\n    Object.keys(source).forEach(key => {\n      target[key] = source[key] as unknown;\n    });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const getElement = (el: HTMLElement | string | null, parent?: HTMLElement): HTMLElement => {\n  let targetEl: HTMLElement | null = null;\n\n  if (isString(el)) {\n    const parentEl = parent ? parent : document;\n    const queryResult = parentEl.querySelector(el);\n    if (!queryResult) {\n      throw new FlickingError(ERROR.MESSAGE.ELEMENT_NOT_FOUND(el), ERROR.CODE.ELEMENT_NOT_FOUND);\n    }\n    targetEl = queryResult as HTMLElement;\n  } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n    targetEl = el;\n  }\n\n  if (!targetEl) {\n    throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n  }\n\n  return targetEl;\n};\n\nexport const checkExistence = (value: any, nameOnErrMsg: string) => {\n  if (value == null) {\n    throw new FlickingError(ERROR.MESSAGE.VAL_MUST_NOT_NULL(value, nameOnErrMsg), ERROR.CODE.VAL_MUST_NOT_NULL);\n  }\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\nexport const getFlickingAttached = (val: Flicking | null, nameToThrowOnError: string): Flicking => {\n  if (!val) {\n    throw new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(nameToThrowOnError), ERROR.CODE.NOT_ATTACHED_TO_FLICKING);\n  }\n\n  return val;\n};\n\nexport const toArray = <T>(iterable: ArrayLike<T>): T[] => [].slice.call(iterable) as T[];\n\nexport const parseAlign = (align: LiteralUnion<ValueOf<typeof ALIGN>> | number, size: number): number => {\n  let alignPoint: number | null;\n  if (isString(align)) {\n    switch (align) {\n      case ALIGN.PREV:\n        alignPoint = 0;\n        break;\n      case ALIGN.CENTER:\n        alignPoint = 0.5 * size;\n        break;\n      case ALIGN.NEXT:\n        alignPoint = size;\n        break;\n      default:\n        alignPoint = parseArithmeticSize(align, size);\n        if (alignPoint == null) {\n          throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"align\", align), ERROR.CODE.WRONG_OPTION);\n        }\n    }\n  } else {\n    alignPoint = align as number;\n  }\n\n  return alignPoint;\n};\n\nexport const parseBounce = (bounce: FlickingOptions[\"bounce\"], size: number): number[] => {\n  let parsedBounce: Array<number | null>;\n\n  if (Array.isArray(bounce)) {\n    parsedBounce = (bounce as string[]).map(val => parseArithmeticSize(val, size));\n  } else {\n    const parsedVal = parseArithmeticSize(bounce, size);\n\n    parsedBounce = [parsedVal, parsedVal];\n  }\n\n  return parsedBounce.map(val => {\n    if (val == null) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"bounce\", bounce), ERROR.CODE.WRONG_OPTION);\n    }\n    return val;\n  });\n};\n\nexport const parseArithmeticSize = (cssValue: number | string, base: number): number | null => {\n  const parsed = parseArithmeticExpression(cssValue);\n\n  if (parsed == null) return null;\n\n  return parsed.percentage * base + parsed.absolute;\n};\n\nexport const parseArithmeticExpression = (cssValue: number | string): { percentage: number; absolute: number } | null => {\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return { percentage: 0, absolute: cssValue };\n  }\n\n  const parsed = {\n    percentage: 0,\n    absolute: 0\n  };\n  let idx = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n    const parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return null;\n    }\n\n    const signMultiplier = sign === \"+\" ? 1 : -1;\n\n    if (unit === \"%\") {\n      parsed.percentage += signMultiplier * (parsedValue / 100);\n    } else {\n      parsed.absolute += signMultiplier * parsedValue;\n    }\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return null;\n  }\n\n  return parsed;\n};\n\nexport const parseCSSSizeValue = (val: string | number): string => isString(val) ? val : `${val}px`;\n\nexport const getDirection = (start: number, end: number): ValueOf<typeof DIRECTION> => {\n  if (start === end) return DIRECTION.NONE;\n  return start < end ? DIRECTION.NEXT : DIRECTION.PREV;\n};\n\nexport const parseElement = (element: ElementLike | ElementLike[]): HTMLElement[] => {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n      elements.push(el);\n    } else {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n    }\n  });\n\n  return elements;\n};\n\nexport const getMinusCompensatedIndex = (idx: number, max: number) => idx < 0 ? clamp(idx + max, 0, max) : clamp(idx, 0, max);\n\nexport const includes = <T>(array: T[], target: any): target is T => {\n  for (const val of array) {\n    if (val === target) return true;\n  }\n  return false;\n};\n\nexport const isString = (val: any): val is string => typeof val === \"string\";\n\nexport const circulatePosition = (pos: number, min: number, max: number) => {\n  const size = max - min;\n\n  if (pos < min) {\n    const offset = (min - pos) % size;\n    pos = max - offset;\n  } else if (pos > max) {\n    const offset = (pos - max) % size;\n    pos = min + offset;\n  }\n\n  return pos;\n};\n\nexport const find = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (const val of array) {\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findRight = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const val = array[idx];\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findIndex = <T>(array: T[], checker: (val: T) => boolean): number => {\n  for (let idx = 0; idx < array.length; idx++) {\n    if (checker(array[idx])) {\n      return idx;\n    }\n  }\n\n  return -1;\n};\n\nexport const getProgress = (pos: number, prev: number, next: number) => (pos - prev) / (next - prev);\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nexport const getStyle = (el: HTMLElement): CSSStyleDeclaration => window.getComputedStyle(el) || (el as any).currentStyle as CSSStyleDeclaration;\n\nexport const isBetween = (val: number, min: number, max: number) => val >= min && val <= max;\n\nexport const circulateIndex = (index: number, max: number): number => {\n  if (index >= max) {\n    return index % max;\n  } else if (index < 0) {\n    return getMinusCompensatedIndex((index + 1) % max - 1, max);\n  } else {\n    return index;\n  }\n};\n\nexport const setPrototypeOf = Object.setPrototypeOf || ((obj, proto) => {\n  obj.__proto__ = proto;\n  return obj;\n});\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/**\n * Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.\n * @ko {@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.\n * @name ERROR_CODE\n * @constant\n * @type object\n * @property {number} WRONG_TYPE Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>\n * @property {number} ELEMENT_NOT_FOUND Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>\n * @property {number} VAL_MUST_NOT_NULL Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>\n * @property {number} NOT_ATTACHED_TO_FLICKING When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>\n * @property {number} WRONG_OPTION One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>\n * @property {number} INDEX_OUT_OF_RANGE When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>\n * @property {number} POSITION_NOT_REACHABLE When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>\n * @property {number} TRANSFORM_NOT_SUPPORTED CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>\n * @property {number} STOP_CALLED_BY_USER When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>\n * @property {number} ANIMATION_INTERRUPTED When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>\n * @property {number} ANIMATION_ALREADY_PLAYING When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>\n * @property {number} NOT_ALLOWED_IN_FRAMEWORK When the non-allowed method is called from frameworks (React, Angular, Vue...)\n * <ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>\n * @property {number} NOT_INITIALIZED When the {@link Flicking#init} is not called before but is needed<ko>{@link Flicking#init}의 호출이 필요하나, 아직 호출되지 않았을 경우</ko>\n * @property {number} NO_ACTIVE When there're no active panel that flicking has selected. This may be due to the absence of any panels<ko>현재 Flicking이 선택한 패널이 없을 경우. 일반적으로 패널이 하나도 없는 경우에 발생할 수 있습니다</ko>\n */\nexport const CODE = {\n  WRONG_TYPE: 0,\n  ELEMENT_NOT_FOUND: 1,\n  VAL_MUST_NOT_NULL: 2,\n  NOT_ATTACHED_TO_FLICKING: 3,\n  WRONG_OPTION: 4,\n  INDEX_OUT_OF_RANGE: 5,\n  POSITION_NOT_REACHABLE: 6,\n  TRANSFORM_NOT_SUPPORTED: 7,\n  STOP_CALLED_BY_USER: 8,\n  ANIMATION_INTERRUPTED: 9,\n  ANIMATION_ALREADY_PLAYING: 10,\n  NOT_ALLOWED_IN_FRAMEWORK: 11,\n  NOT_INITIALIZED: 12,\n  NO_ACTIVE: 13\n} as const;\n\nexport const MESSAGE = {\n  WRONG_TYPE: (wrongVal: any, correctTypes: string[]) => `${wrongVal}(${typeof wrongVal}) is not a ${correctTypes.map(type => `\"${type}\"`).join(\" or \")}.`,\n  ELEMENT_NOT_FOUND: (selector: string) => `Element with selector \"${selector}\" not found.`,\n  VAL_MUST_NOT_NULL: (val: any, name: string) => `${name} should be provided. Given: ${val}`,\n  NOT_ATTACHED_TO_FLICKING: (name: string) => `${name} is not attached to the Flicking instance. \"init()\" should be called first.`,\n  WRONG_OPTION: (optionName: string, val: any) => `Option \"${optionName}\" is not in correct format, given: ${val}`,\n  INDEX_OUT_OF_RANGE: (val: number, min: number, max: number) => `Index \"${val}\" is out of range: should be between ${min} and ${max}.`,\n  POSITION_NOT_REACHABLE: (position: number) => `Position \"${position}\" is not reachable.`,\n  TRANSFORM_NOT_SUPPORTED: \"Browser does not support CSS transform.\",\n  STOP_CALLED_BY_USER: \"Event stop() is called by user.\",\n  ANIMATION_INTERRUPTED: \"Animation is interrupted by user input.\",\n  ANIMATION_ALREADY_PLAYING: \"Animation is already playing.\",\n  NOT_ALLOWED_IN_FRAMEWORK: \"This behavior is not allowed in the frameworks like React, Vue, or Angular.\",\n  NOT_INITIALIZED: \"Flicking is not initialized yet, call init() first.\",\n  NO_ACTIVE: \"There's no active panel that Flicking has selected. This may be due to the absence of any panels.\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport { CODE as ERROR_CODE } from \"./error\";\n\n/**\n * Event type object with event name strings of {@link Flicking}\n * @ko {@link Flicking}의 이벤트 이름 문자열들을 담은 객체\n * @type {object}\n * @property {\"holdStart\"} HOLD_START holdStart event<ko>holdStart 이벤트</ko>\n * @property {\"holdEnd\"} HOLD_END holdEnd event<ko>holdEnd 이벤트</ko>\n * @property {\"moveStart\"} MOVE_START moveStart event<ko>moveStart 이벤트</ko>\n * @property {\"move\"} MOVE move event<ko>move 이벤트</ko>\n * @property {\"moveEnd\"} MOVE_END moveEnd event<ko>moveEnd 이벤트</ko>\n * @property {\"willChange\"} WILL_CHANGE willChange event<ko>willChange 이벤트</ko>\n * @property {\"changed\"} CHANGED changed event<ko>changed 이벤트</ko>\n * @property {\"willRestore\"} WILL_RESTORE willRestore event<ko>willRestore 이벤트</ko>\n * @property {\"restored\"} RESTORED restored event<ko>restored 이벤트</ko>\n * @property {\"select\"} SELECT select event<ko>select 이벤트</ko>\n * @property {\"needPanel\"} NEED_PANEL needPanel event<ko>needPanel 이벤트</ko>\n * @property {\"panelChange\"} PANEL_CHANGE panelChange event<ko>panelChange 이벤트</ko>\n * @example\n * ```ts\n * import { EVENTS } from \"@egjs/flicking\";\n * EVENTS.MOVE_START; // \"moveStart\"\n * ```\n */\nexport const EVENTS = {\n  READY: \"ready\",\n  BEFORE_RESIZE: \"beforeResize\",\n  AFTER_RESIZE: \"afterResize\",\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  WILL_CHANGE: \"willChange\",\n  CHANGED: \"changed\",\n  WILL_RESTORE: \"willRestore\",\n  RESTORED: \"restored\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n  REACH_EDGE: \"reachEdge\",\n  PANEL_CHANGE: \"panelChange\"\n} as const;\n\n/**\n * An object with all possible predefined literal string for the {@link Flicking#align align} option\n * @ko {@link Flicking#align align} 옵션에 사용되는 미리 정의된 리터럴 상수들을 담고 있는 객체\n * @type {object}\n * @property {\"prev\"} PREV left/top align<ko>좌/상 정렬</ko>\n * @property {\"center\"} CENTER center align<ko>중앙 정렬</ko>\n * @property {\"next\"} NEXT right/bottom align<ko>우/하 정렬</ko>\n */\nexport const ALIGN = {\n  PREV: \"prev\",\n  CENTER: \"center\",\n  NEXT: \"next\"\n} as const;\n\n/**\n * An object of directions\n * @ko 방향을 나타내는 값들을 담고 있는 객체\n * @type {object}\n * @property {\"PREV\"} PREV \"left\" when {@link Flicking#horizontal horizontal} is true, and \"top\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 왼쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 위쪽을 의미합니다</ko>\n * @property {\"NEXT\"} NEXT \"right\" when {@link Flicking#horizontal horizontal} is true, and \"bottom\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 오른쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 아래쪽을 의미합니다</ko>\n * @property {null} NONE This value usually means it's the same position<ko>주로 제자리인 경우를 의미합니다</ko>\n */\nexport const DIRECTION = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  NONE: null\n} as const;\n\n/**\n * An object with all possible {@link Flicking#moveType moveType}s\n * @ko Flicking이 제공하는 {@link Flicking#moveType moveType}들을 담고 있는 객체\n * @type {object}\n * @property {\"snap\"} SNAP Flicking's {@link Flicking#moveType moveType} that enables {@link SnapControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link SnapControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"freeScroll\"} FREE_SCROLL Flicking's {@link Flicking#moveType moveType} that enables {@link FreeControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link FreeControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"strict\"} STRICT Flicking's {@link Flicking#moveType moveType} that enables {@link StrictControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link StrictControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n */\nexport const MOVE_TYPE = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n  STRICT: \"strict\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { setPrototypeOf } from \"../utils\";\n\n/**\n * Special type of known error that {@link Flicking} throws.\n * @ko Flicking 내부에서 알려진 오류 발생시 throw되는 에러\n * @property {number} code Error code<ko>에러 코드</ko>\n * @property {string} message Error message<ko>에러 메시지</ko>\n * @see {@link Constants.ERROR_CODE ERROR_CODE}\n * @example\n * ```ts\n * import Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\n * try {\n *   const flicking = new Flicking(\".flicking-viewport\")\n * } catch (e) {\n *   if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n *     console.error(\"Element not found\")\n *   }\n * }\n * ```\n */\nclass FlickingError extends Error {\n  public code: number;\n\n  /**\n   * @param message Error message<ko>에러 메시지</ko>\n   * @param code Error code<ko>에러 코드</ko>\n   */\n  public constructor(message: string, code: number) {\n    super(message);\n\n    setPrototypeOf(this, FlickingError.prototype);\n    this.name = \"FlickingError\";\n    this.code = code;\n  }\n}\n\nexport default FlickingError;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getStyle, isString } from \"../utils\";\n\n/**\n * A component that manages viewport size\n * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n */\nclass Viewport {\n  private _el: HTMLElement;\n  private _width: number;\n  private _height: number;\n  private _isBorderBoxSizing: boolean;\n  private _padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n\n  /**\n   * A viewport(root) element\n   * @ko 뷰포트(root) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  /**\n   * Viewport width, without paddings\n   * @ko 뷰포트 너비\n   * @type {number}\n   * @readonly\n   */\n  public get width() { return this._width - this._padding.left - this._padding.right; }\n  /**\n   * Viewport height, without paddings\n   * @ko 뷰포트 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height - this._padding.top - this._padding.bottom; }\n  /**\n   * Viewport paddings\n   * @ko 뷰포트 CSS padding 값\n   * @type {object}\n   * @property {number} left CSS `padding-left`\n   * @property {number} right CSS `padding-right`\n   * @property {number} top CSS `padding-top`\n   * @property {number} bottom CSS `padding-bottom`\n   * @readonly\n   */\n  public get padding() { return this._padding; }\n\n  /**\n   * @param el A viewport element<ko>뷰포트 엘리먼트</ko>\n   */\n  public constructor(el: HTMLElement) {\n    this._el = el;\n    this._width = 0;\n    this._height = 0;\n    this._padding = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this._isBorderBoxSizing = false;\n  }\n\n  /**\n   * Change viewport's size.\n   * This will change the actual size of `.flicking-viewport` element by changing its CSS width/height property\n   * @ko 뷰포트 크기를 변경합니다.\n   * `.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New viewport size<ko>새 뷰포트 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   */\n  public setSize({\n    width,\n    height\n  }: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    const el = this._el;\n    const padding = this._padding;\n    const isBorderBoxSizing = this._isBorderBoxSizing;\n\n    if (width != null) {\n      if (isString(width)) {\n        el.style.width = width;\n      } else {\n        const newWidth = isBorderBoxSizing\n          ? width + padding.left + padding.right\n          : width;\n        el.style.width = `${newWidth}px`;\n      }\n    }\n    if (height != null) {\n      if (isString(height)) {\n        el.style.height = height;\n      } else {\n        const newHeight = isBorderBoxSizing\n          ? height + padding.top + padding.bottom\n          : height;\n        el.style.height = `${newHeight}px`;\n      }\n    }\n    this.resize();\n  }\n\n  /**\n   * Update width/height to the current viewport element's size\n   * @ko 현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다\n   */\n  public resize() {\n    const el = this._el;\n    const elStyle = getStyle(el);\n\n    this._width = el.clientWidth;\n    this._height = el.clientHeight;\n    this._padding = {\n      left: parseFloat(elStyle.paddingLeft),\n      right: parseFloat(elStyle.paddingRight),\n      top: parseFloat(elStyle.paddingTop),\n      bottom: parseFloat(elStyle.paddingBottom)\n    };\n    this._isBorderBoxSizing = elStyle.boxSizing === \"border-box\";\n  }\n}\n\nexport default Viewport;\n","/**\n * All possible @egjs/axes event keys\n * @internal\n */\nexport const EVENT = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\"\n} as const;\n\n/**\n * An Axis key that Flicking uses\n * @internal\n */\nexport const POSITION_KEY = \"flick\";\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OnAnimationEnd, OnChange, OnFinish, OnHold, OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../../Flicking\";\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\nimport { circulatePosition, getDirection } from \"../../utils\";\n\nexport enum STATE_TYPE {\n  IDLE,\n  HOLDING,\n  DRAGGING,\n  ANIMATING,\n  DISABLED\n}\n\n/**\n * A component that shows the current status of the user input or the animation\n * @ko 현재 사용자 입력 또는 애니메이션 상태를 나타내는 컴포넌트\n * @internal\n */\nabstract class State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly holding: boolean;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly animating: boolean;\n\n  protected _delta: number = 0;\n\n  /**\n   * A sum of delta values of change events from the last hold event of Axes\n   * @ko 이전 hold이벤트부터 change에 의해 발생한 이동 delta값의 합산\n   * @type {number}\n   * @readonly\n   */\n  public get delta() { return this._delta; }\n\n  /**\n   * An callback which is called when state has changed to this state\n   * @ko 현재 상태로 돌입했을때 호출되는 콜백 함수\n   * @param {State} prevState An previous state<ko>이전 상태값</ko>\n   * @return {void}\n   */\n  public onEnter(prevState: State): void {\n    this._delta = prevState._delta;\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onHold(ctx: {\n    flicking: Flicking;\n    axesEvent: OnHold;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onChange(ctx: {\n    flicking: Flicking;\n    axesEvent: OnChange;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onRelease(ctx: {\n    flicking: Flicking;\n    axesEvent: OnRelease;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onAnimationEnd(ctx: {\n    flicking: Flicking;\n    axesEvent: OnAnimationEnd;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onFinish(ctx: {\n    flicking: Flicking;\n    axesEvent: OnFinish;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  protected _moveToChangedPosition(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const delta = axesEvent.delta[AXES.POSITION_KEY];\n\n    if (!delta) {\n      return;\n    }\n\n    this._delta += delta;\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n    const position = axesEvent.pos[AXES.POSITION_KEY];\n    const newPosition = flicking.circularEnabled\n      ? circulatePosition(position, camera.range.min, camera.range.max)\n      : position;\n\n    void camera.lookAt(newPosition);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta[AXES.POSITION_KEY]),\n      axesEvent\n    });\n\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      void camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n}\n\nexport default State;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A default state when there's no user input and no animation's playing\n * @ko 사용자의 입력이 없고, 애니메이션이 동작하고있지 않은 기본 상태\n * @internal\n */\nclass IdleState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  public onEnter() {\n    this._delta = 0;\n  }\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    // Shouldn't do any action until any panels on flicking area\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (flicking.renderer.panelCount <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, {\n      axesEvent\n    });\n\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.HOLDING);\n    }\n  }\n\n  // By methods call\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.ANIMATING).onChange(ctx);\n    }\n  }\n}\n\nexport default IdleState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's holding the Flicking area, but not moved a single pixel yet\n * @ko 사용자의 입력이 시작되었으나, 아직 움직이지는 않은 상태\n * @internal\n */\nclass HoldingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  private _releaseEvent: OnRelease | null = null;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const inputEvent = axesEvent.inputEvent as { offsetX: number; offsetY: number };\n\n    const offset = flicking.horizontal\n      ? inputEvent.offsetX\n      : inputEvent.offsetY;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, -offset),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.DRAGGING).onChange(ctx);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, { axesEvent }));\n\n    if (axesEvent.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      axesEvent.setTo({ flick: flicking.camera.position }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this._releaseEvent = axesEvent;\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]): void {\n    const { flicking, transitTo } = ctx;\n\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this._releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this._releaseEvent;\n\n    // Static click\n    /* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    /* eslint-enable */\n\n    const panels = flicking.renderer.panels;\n    let clickedPanel: Panel | null = null;\n\n    for (const panel of panels) {\n      if (panel.contains(clickedElement)) {\n        clickedPanel = panel;\n        break;\n      }\n    }\n\n    if (clickedPanel) {\n      const cameraPosition = flicking.camera.position;\n      const clickedPanelPosition = clickedPanel.position;\n\n      flicking.trigger(new ComponentEvent(EVENTS.SELECT, {\n        index: clickedPanel.index,\n        panel: clickedPanel,\n        // Direction to the clicked panel\n        direction: getDirection(cameraPosition, clickedPanelPosition)\n      }));\n    }\n  }\n}\n\nexport default HoldingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's dragging the Flicking area\n * @ko 사용자가 드래깅중인 상태\n * @internal\n */\nclass DraggingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, {\n      axesEvent\n    }));\n\n    if (flicking.renderer.panelCount <= 0) {\n      // There're no panels\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    transitTo(STATE_TYPE.ANIMATING);\n\n    const control = flicking.control;\n    const position = axesEvent.destPos[AXES.POSITION_KEY];\n    const duration = Math.max(axesEvent.duration, flicking.duration);\n\n    void control.moveToPosition(position, duration, axesEvent);\n  }\n}\n\nexport default DraggingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking's animating by user input or method call\n * @ko 사용자 입력이나 메소드 호출에 의해 Flicking의 애니메이션이 동작중인 상태\n * @internal\n */\nclass AnimatingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    this._delta = 0;\n    flicking.control.updateInput();\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, { axesEvent });\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.DRAGGING);\n    }\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]) {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    flicking.trigger(new ComponentEvent(EVENTS.MOVE_END, {\n      isTrusted: axesEvent.isTrusted,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    }));\n  }\n}\n\nexport default AnimatingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking is stopped by event's `stop` method\n * @ko 이벤트의 `stop`호출에 의해 Flicking이 정지된 상태\n * @internal\n */\nclass DisabledState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onAnimationEnd(ctx: Parameters<State[\"onAnimationEnd\"]>[0]): void {\n    const { transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // Can stop Axes's change event\n    axesEvent.stop();\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // This is needed when stopped hold start event\n    if (axesEvent.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { AxesEvents } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport * as AXES from \"../const/axes\";\n\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport State, { STATE_TYPE } from \"./states/State\";\n\n/**\n * @internal\n */\nclass StateMachine {\n  private _state: State;\n\n  public get state(): State { return this._state; }\n\n  public constructor() {\n    this._state = new IdleState();\n  }\n\n  public fire(eventType: keyof AxesEvents, externalCtx: {\n    flicking: Flicking;\n    axesEvent: any;\n  }) {\n    const currentState = this._state;\n    const ctx = { ...externalCtx, transitTo: this.transitTo };\n\n    switch (eventType) {\n      case AXES.EVENT.HOLD:\n        currentState.onHold(ctx);\n        break;\n      case AXES.EVENT.CHANGE:\n        currentState.onChange(ctx);\n        break;\n      case AXES.EVENT.RELEASE:\n        currentState.onRelease(ctx);\n        break;\n      case AXES.EVENT.ANIMATION_END:\n        currentState.onAnimationEnd(ctx);\n        break;\n      case AXES.EVENT.FINISH:\n        currentState.onFinish(ctx);\n        break;\n    }\n  }\n\n  public transitTo = (nextStateType: STATE_TYPE): State => {\n    let nextState: State;\n\n    switch (nextStateType) {\n      case STATE_TYPE.IDLE:\n        nextState = new IdleState();\n        break;\n      case STATE_TYPE.HOLDING:\n        nextState = new HoldingState();\n        break;\n      case STATE_TYPE.DRAGGING:\n        nextState = new DraggingState();\n        break;\n      case STATE_TYPE.ANIMATING:\n        nextState = new AnimatingState();\n        break;\n      case STATE_TYPE.DISABLED:\n        nextState = new DisabledState();\n        break;\n    }\n\n    nextState.onEnter(this._state);\n\n    this._state = nextState;\n\n    return this._state;\n  };\n}\n\nexport default StateMachine;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput, AxesEvents, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\nimport { circulatePosition, getFlickingAttached, parseBounce } from \"../utils\";\nimport { ControlParams } from \"../type/external\";\n\nimport StateMachine from \"./StateMachine\";\n\n/**\n * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n * @internal\n */\nclass AxesController {\n  private _flicking: Flicking | null;\n  private _axes: Axes | null;\n  private _panInput: PanInput | null;\n  private _stateMachine: StateMachine;\n\n  private _animatingContext: { start: number; end: number; offset: number };\n  private _dragged: boolean;\n\n  /**\n   * An {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes}의 인스턴스\n   * @type {Axes}\n   * @see https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html\n   * @readonly\n   */\n  public get axes() { return this._axes; }\n  /**\n   * A activated {@link State} that shows the current status of the user input or the animation\n   * @ko 현재 활성화된 {@link State} 인스턴스로 사용자 입력 또는 애니메이션 상태를 나타냅니다\n   * @type {State}\n   */\n  public get state() { return this._stateMachine.state; }\n  /**\n   * A context of the current animation playing\n   * @ko 현재 재생중인 애니메이션 정보\n   * @type {object}\n   * @property {number} start A start position of the animation<ko>애니메이션 시작 지점</ko>\n   * @property {number} end A end position of the animation<ko>애니메이션 끝 지점</ko>\n   * @property {number} offset camera offset<ko>카메라 오프셋</ko>\n   * @readonly\n   */\n  public get animatingContext() { return this._animatingContext; }\n  /**\n   * A current control parameters of the Axes instance\n   * @ko 활성화된 현재 Axes 패러미터들\n   * @type {ControlParams}\n   */\n  public get controlParams(): ControlParams {\n    const axes = this._axes;\n\n    if (!axes) {\n      return {\n        range: { min: 0, max: 0 },\n        position: 0,\n        circular: false\n      };\n    }\n\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    return {\n      range: { min: axis.range![0], max: axis.range![1] },\n      circular: (axis.circular as boolean[])[0],\n      position: this.position\n    };\n  }\n\n  /**\n   * A Boolean indicating whether the user input is enabled\n   * @ko 현재 사용자 입력이 활성화되었는지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get enabled() { return this._panInput?.isEnable() ?? false; }\n  /**\n   * Current position value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 좌표 값\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._axes?.get([AXES.POSITION_KEY])[AXES.POSITION_KEY] ?? 0; }\n  /**\n   * Current range value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 이동 범위 값\n   * @type {number[]}\n   * @readonly\n   */\n  public get range() { return this._axes?.axis[AXES.POSITION_KEY].range ?? [0, 0]; }\n  /**\n   * Actual bounce size(px)\n   * @ko 적용된 bounce 크기(px 단위)\n   * @type {number[]}\n   * @readonly\n   */\n  public get bounce() { return this._axes?.axis[AXES.POSITION_KEY].bounce as number[] | undefined; }\n\n  /** */\n  public constructor() {\n    this._resetInternalValues();\n    this._stateMachine = new StateMachine();\n  }\n\n  /**\n   * Initialize AxesController\n   * @ko AxesController를 초기화합니다\n   * @param {Flicking} flicking An instance of Flicking\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    this._axes = new Axes({\n      [AXES.POSITION_KEY]: {\n        range: [0, 0],\n        circular: false,\n        bounce: [0, 0]\n      }\n    }, {\n      deceleration: flicking.deceleration,\n      interruptable: flicking.interruptable,\n      easing: flicking.easing\n    });\n    this._panInput = new PanInput(flicking.viewport.element, {\n      inputType: flicking.inputType,\n      iOSEdgeSwipeThreshold: flicking.iOSEdgeSwipeThreshold,\n      scale: flicking.horizontal ? [-1, 0] : [0, -1],\n      releaseOnScroll: true\n    });\n\n    const axes = this._axes;\n\n    axes.connect(flicking.horizontal ? [AXES.POSITION_KEY, \"\"] : [\"\", AXES.POSITION_KEY], this._panInput);\n\n    for (const key in AXES.EVENT) {\n      const eventType = AXES.EVENT[key] as keyof AxesEvents;\n\n      axes.on(eventType, (e: AxesEvents[typeof eventType]) => {\n        this._stateMachine.fire(eventType, {\n          flicking,\n          axesEvent: e\n        });\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Destroy AxesController and return to initial state\n   * @ko AxesController를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this.removePreventClickHandler();\n\n    this._axes?.destroy();\n    this._panInput?.destroy();\n\n    this._resetInternalValues();\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._panInput?.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._panInput?.disable();\n\n    return this;\n  }\n\n  /**\n   * Update {@link https://naver.github.io/egjs-axes/ @egjs/axes}'s state\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 상태를 갱신합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link AxesController#init init} is not called before\n   * <ko>{@link AxesController#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public update(controlParams: ControlParams): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const axes = this._axes!;\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    axis.circular = [controlParams.circular, controlParams.circular];\n    axis.range = [controlParams.range.min, controlParams.range.max];\n    axis.bounce = parseBounce(flicking.bounce, camera.size);\n\n    axes.axm.set({ [AXES.POSITION_KEY]: controlParams.position });\n\n    return this;\n  }\n\n  /**\n   * Attach a handler to the camera element to prevent click events during animation\n   * @ko 카메라 엘리먼트에 애니메이션 도중에 클릭 이벤트를 방지하는 핸들러를 부착합니다\n   * @return {this}\n   */\n  public addPreventClickHandler(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.on(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.on(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.addEventListener(\"click\", this._preventClickWhenDragged, true);\n\n    return this;\n  }\n\n  /**\n   * Detach a handler to the camera element to prevent click events during animation\n   * @ko 카메라 엘리먼트에 애니메이션 도중에 클릭 이벤트를 방지하는 핸들러를 탈착합니다\n   * @return {this}\n   */\n  public removePreventClickHandler(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.off(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.off(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.removeEventListener(\"click\", this._preventClickWhenDragged, true);\n\n    return this;\n  }\n\n  /**\n   * Run Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} using the given position\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} 메소드를 주어진 좌표를 이용하여 수행합니다\n   * @param {number} position A position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {number} [axesEvent] If provided, it'll use its {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} method instead<ko>이 값이 주어졌을 경우, 해당 이벤트의 {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} 메소드를 대신해서 사용합니다.</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public animateTo(position: number, duration: number, axesEvent?: OnRelease): Promise<void> {\n    const axes = this._axes;\n\n    if (!axes) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(\"Control\"), ERROR.CODE.NOT_ATTACHED_TO_FLICKING));\n    }\n\n    const startPos = axes.get([AXES.POSITION_KEY])[AXES.POSITION_KEY];\n\n    if (startPos === position) {\n      const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n      return flicking.camera.lookAt(position);\n    }\n\n    this._animatingContext = {\n      start: startPos,\n      end: position,\n      offset: 0\n    };\n\n    const animate = () => {\n      const resetContext = () => {\n        this._animatingContext = { start: 0, end: 0, offset: 0 };\n      };\n\n      axes.once(AXES.EVENT.FINISH, resetContext);\n\n      if (axesEvent) {\n        axesEvent.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      } else {\n        axes.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      }\n    };\n\n    if (duration === 0) {\n      const flicking = getFlickingAttached(this._flicking, \"Control\");\n      const camera = flicking.camera;\n\n      animate();\n\n      const newPos = flicking.circularEnabled\n        ? circulatePosition(position, camera.range.min, camera.range.max)\n        : position;\n\n      axes.axm.set({ [AXES.POSITION_KEY]: newPos });\n\n      return Promise.resolve();\n    } else {\n      return new Promise((resolve, reject) => {\n        const animationFinishHandler = () => {\n          axes.off(AXES.EVENT.HOLD, interruptionHandler);\n          resolve();\n        };\n\n        const interruptionHandler = () => {\n          axes.off(AXES.EVENT.FINISH, animationFinishHandler);\n          reject(new FlickingError(ERROR.MESSAGE.ANIMATION_INTERRUPTED, ERROR.CODE.ANIMATION_INTERRUPTED));\n        };\n\n        axes.once(AXES.EVENT.FINISH, animationFinishHandler);\n        axes.once(AXES.EVENT.HOLD, interruptionHandler);\n\n        animate();\n      });\n    }\n  }\n\n  private _resetInternalValues() {\n    this._flicking = null;\n    this._axes = null;\n    this._panInput = null;\n    this._animatingContext = { start: 0, end: 0, offset: 0 };\n    this._dragged = false;\n  }\n\n  private _onAxesHold = () => {\n    this._dragged = false;\n  };\n\n  private _onAxesChange = () => {\n    this._dragged = true;\n  };\n\n  private _preventClickWhenDragged = (e: MouseEvent) => {\n    if (this._dragged) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    this._dragged = false;\n  };\n}\n\nexport default AxesController;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AxesController from \"../control/AxesController\";\nimport { DIRECTION, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getDirection, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\n/**\n * A component that manages inputs and animation of Flicking\n * @ko Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트\n */\nabstract class Control {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _controller: AxesController;\n  protected _activePanel: Panel | null;\n\n  /**\n   * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n   * @type {AxesController}\n   * @readonly\n   */\n  public get controller() { return this._controller; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get activeIndex() { return this._activePanel?.index ?? -1; }\n  /**\n   * An active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel | null}\n   * @readonly\n   */\n  public get activePanel() { return this._activePanel; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._controller.state.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._controller.state.holding; }\n\n  /** */\n  public constructor() {\n    this._flicking = null;\n    this._controller = new AxesController();\n    this._activePanel = null;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @method\n   * @abstract\n   * @memberof Control\n   * @instance\n   * @name moveToPosition\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public abstract moveToPosition(position: number, duration: number, axesEvent?: OnRelease): Promise<void>;\n\n  /**\n   * Initialize Control\n   * @ko Control을 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._controller.init(flicking);\n\n    return this;\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._controller.destroy();\n\n    this._flicking = null;\n    this._activePanel = null;\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._controller.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._controller.disable();\n\n    return this;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(_progressInPanel: number): Promise<void> {   // eslint-disable-line @typescript-eslint/no-unused-vars\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      await camera.lookAt(camera.clampToReachablePosition(activePanel.position));\n    }\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    this._controller.update(camera.controlParams);\n\n    return this;\n  }\n\n  /**\n   * Reset {@link Control#activePanel activePanel} to `null`\n   * @ko {@link Control#activePanel activePanel}을 `null`로 초기화합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetActive(): this {\n    this._activePanel = null;\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given panel\n   * @ko {@link Camera}를 해당 패널 위로 이동합니다\n   * @param {Panel} panel The target panel to move<ko>이동할 패널</ko>\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPanel(panel: Panel, {\n    duration,\n    direction = DIRECTION.NONE,\n    axesEvent\n  }: {\n    duration: number;\n    direction?: ValueOf<typeof DIRECTION>;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    let position = panel.position;\n    const nearestAnchor = camera.findNearestAnchor(position);\n\n    if (panel.removed || !nearestAnchor) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(panel.position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n    if (!camera.canReach(panel)) {\n      // Override position & panel if that panel is not reachable\n      position = nearestAnchor.position;\n      panel = nearestAnchor.panel;\n    } else if (flicking.circularEnabled) {\n      // Circular mode is enabled, find nearest distance to panel\n      const camPos = this._controller.position; // Actual position of the Axes\n      const camRangeDiff = camera.rangeDiff;\n      const possiblePositions = [position, position + camRangeDiff, position - camRangeDiff]\n        .filter(pos => {\n          if (direction === DIRECTION.NONE) return true;\n\n          return direction === DIRECTION.PREV\n            ? pos <= camPos\n            : pos >= camPos;\n        });\n\n      position = possiblePositions.reduce((nearestPosition, pos) => {\n        if (Math.abs(camPos - pos) < Math.abs(camPos - nearestPosition)) {\n          return pos;\n        } else {\n          return nearestPosition;\n        }\n      }, Infinity);\n    }\n\n    this._triggerIndexChangeEvent(panel, panel.position, axesEvent);\n\n    return this._animateToPosition({ position, duration, newActivePanel: panel, axesEvent });\n  }\n\n  protected _triggerIndexChangeEvent(panel: Panel, position: number, axesEvent?: OnRelease): void {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const triggeringEvent = panel !== this._activePanel ? EVENTS.WILL_CHANGE : EVENTS.WILL_RESTORE;\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const event = new ComponentEvent(triggeringEvent, {\n      index: panel.index,\n      panel,\n      isTrusted: axesEvent?.isTrusted || false,\n      direction: getDirection(activePanel?.position ?? camera.position, position)\n    });\n    flicking.trigger(event);\n\n    if (event.isCanceled()) {\n      throw new FlickingError(ERROR.MESSAGE.STOP_CALLED_BY_USER, ERROR.CODE.STOP_CALLED_BY_USER);\n    }\n  }\n\n  protected async _animateToPosition({\n    position,\n    duration,\n    newActivePanel,\n    axesEvent\n  }: {\n    position: number;\n    duration: number;\n    newActivePanel: Panel;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const currentPanel = this._activePanel;\n    const animate = () => this._controller.animateTo(position, duration, axesEvent);\n    const isTrusted = axesEvent?.isTrusted || false;\n\n    if (duration <= 0) {\n      const animation = animate();\n      this._setActive(newActivePanel, currentPanel, isTrusted);\n      return animation;\n    } else {\n      return animate().then(async () => {\n        this._setActive(newActivePanel, currentPanel, isTrusted);\n        await flicking.renderer.render();\n      }).catch(err => {\n        if (axesEvent && err instanceof FlickingError && err.code === ERROR.CODE.ANIMATION_INTERRUPTED) return;\n        throw err;\n      });\n    }\n  }\n\n  protected _setActive(newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    this._activePanel = newActivePanel;\n\n    flicking.camera.updateAdaptiveHeight();\n\n    if (newActivePanel !== prevActivePanel) {\n      flicking.trigger(new ComponentEvent(EVENTS.CHANGED, {\n        index: newActivePanel.index,\n        panel: newActivePanel,\n        prevIndex: prevActivePanel?.index ?? -1,\n        prevPanel: prevActivePanel,\n        isTrusted,\n        direction: prevActivePanel ? getDirection(prevActivePanel.position, newActivePanel.position) : DIRECTION.NONE\n      }));\n    } else {\n      flicking.trigger(new ComponentEvent(EVENTS.RESTORED, {\n        isTrusted\n      }));\n    }\n  }\n}\n\nexport default Control;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"./panel/Panel\";\n\n/**\n * A data component that has actual position where the camera should be stopped at\n * @ko 카메라가 정지해야하는 실제 위치를 담고 있는 데이터 컴포넌트\n */\nclass AnchorPoint {\n  private _index: number;\n  private _pos: number;\n  private _panel: Panel;\n\n  /**\n   * Index of AnchorPoint\n   * @ko AnchorPoint의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of AnchorPoint\n   * @ko AnchorPoint의 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos; }\n  /**\n   * A {@link Panel} instance AnchorPoint is referencing to\n   * @ko AnchorPoint가 참조하고 있는 {@link Panel}\n   * @type {Panel}\n   * @readonly\n   */\n  public get panel() { return this._panel; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 객체</ko>\n   * @param {number} [options.index] Index of AnchorPoint<ko>AnchorPoint의 인덱스</ko>\n   * @param {number} [options.position] Position of AnchorPoint<ko>AnchorPoint의 좌표</ko>\n   * @param {Panel} [options.panel] A {@link Panel} instance AnchorPoint is referencing to<ko>AnchorPoint가 참조하고 있는 {@link Panel}</ko>\n   */\n  public constructor({\n    index,\n    position,\n    panel\n  }: {\n    index: number;\n    position: number;\n    panel: Panel;\n  }) {\n    this._index = index;\n    this._pos = position;\n    this._panel = panel;\n  }\n}\n\nexport default AnchorPoint;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { circulateIndex, clamp, getFlickingAttached } from \"../utils\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link SnapControl}\n * @ko {@link SnapControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels can go after release<ko>입력 중단 이후 통과하여 이동할 수 있는 패널의 최대 갯수</ko>\n */\nexport interface SnapControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that uses a release momentum to choose destination panel\n * @ko 입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식을 사용하는 {@link Control}\n */\nclass SnapControl extends Control {\n  private _count: SnapControlOptions[\"count\"];\n\n  /**\n   * Maximum number of panels can go after release\n   * @ko 입력 중단 이후 통과하여 이동할 수 있는 패널의 최대 갯수\n   * @type {number}\n   * @default Infinity\n   */\n  public get count() { return this._count; }\n\n  public set count(val: SnapControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = Infinity\n  }: Partial<SnapControlOptions> = {}) {\n    super();\n\n    this._count = count;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activeAnchor = camera.findActiveAnchor();\n    const anchorAtCamera = camera.findNearestAnchor(camera.position);\n    const state = flicking.control.controller.state;\n\n    if (!activeAnchor || !anchorAtCamera) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const snapThreshold = this._calcSnapThreshold(position, activeAnchor);\n\n    const posDelta = flicking.animating\n      ? state.delta\n      : position - camera.position;\n    const absPosDelta = Math.abs(posDelta);\n    const snapDelta = axesEvent && axesEvent.delta[AXES.POSITION_KEY] !== 0\n      ? Math.abs(axesEvent.delta[AXES.POSITION_KEY])\n      : absPosDelta;\n    let targetAnchor: AnchorPoint;\n\n    if (snapDelta >= snapThreshold && snapDelta > 0) {\n      // Move to anchor at position\n      targetAnchor = this._findSnappedAnchor(position, anchorAtCamera);\n    } else if (absPosDelta >= flicking.threshold && absPosDelta > 0) {\n      // Move to the adjacent panel\n      targetAnchor = this._findAdjacentAnchor(posDelta, anchorAtCamera);\n    } else {\n      // Restore to active panel\n      targetAnchor = anchorAtCamera;\n    }\n\n    this._triggerIndexChangeEvent(targetAnchor.panel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: camera.clampToReachablePosition(targetAnchor.position),\n      duration,\n      newActivePanel: targetAnchor.panel,\n      axesEvent\n    });\n  }\n\n  private _findSnappedAnchor(position: number, anchorAtCamera: AnchorPoint): AnchorPoint {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const count = this._count;\n\n    const currentPos = camera.position;\n\n    const clampedPosition = camera.clampToReachablePosition(position);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtCamera || !anchorAtPosition) {\n      throw new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE);\n    }\n\n    if (!isFinite(count)) {\n      return anchorAtPosition;\n    }\n\n    const panelCount = flicking.panelCount;\n    const anchors = camera.anchorPoints;\n\n    let loopCount = Math.sign(position - currentPos) * Math.floor(Math.abs(position - currentPos) / camera.rangeDiff);\n    if ((position > currentPos && anchorAtPosition.index < anchorAtCamera.index)\n      || (anchorAtPosition.position > anchorAtCamera.position && anchorAtPosition.index === anchorAtCamera.index)) {\n      loopCount += 1;\n    } else if ((position < currentPos && anchorAtPosition.index > anchorAtCamera.index)\n      || (anchorAtPosition.position < anchorAtCamera.position && anchorAtPosition.index === anchorAtCamera.index)) {\n      loopCount -= 1;\n    }\n\n    const circularIndexOffset = loopCount * panelCount;\n    const anchorAtPositionIndex = anchorAtPosition.index + circularIndexOffset;\n\n    if (Math.abs(anchorAtPositionIndex - anchorAtCamera.index) <= count) {\n      const anchor = anchors[anchorAtPosition.index];\n\n      return new AnchorPoint({\n        index: anchor.index,\n        position: anchor.position + loopCount * camera.rangeDiff,\n        panel: anchor.panel\n      });\n    }\n\n    if (flicking.circularEnabled) {\n      const targetAnchor = anchors[circulateIndex(anchorAtCamera.index + Math.sign(position - currentPos) * count, panelCount)];\n      let loop = Math.floor(count / panelCount);\n\n      if (position > currentPos && targetAnchor.index < anchorAtCamera.index) {\n        loop += 1;\n      } else if (position < currentPos && targetAnchor.index > anchorAtCamera.index) {\n        loop -= 1;\n      }\n\n      return new AnchorPoint({\n        index: targetAnchor.index,\n        position: targetAnchor.position + loop * camera.rangeDiff,\n        panel: targetAnchor.panel\n      });\n    } else {\n      return anchors[clamp(anchorAtCamera.index + Math.sign(position - currentPos) * count, 0, anchors.length - 1)];\n    }\n  }\n\n  private _findAdjacentAnchor(posDelta: number, anchorAtCamera: AnchorPoint): AnchorPoint {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const adjacentAnchor = (posDelta > 0 ? camera.getNextAnchor(anchorAtCamera) : camera.getPrevAnchor(anchorAtCamera)) ?? anchorAtCamera;\n\n    return adjacentAnchor;\n  }\n\n  private _calcSnapThreshold(position: number, activeAnchor: AnchorPoint): number {\n    const isNextDirection = position > activeAnchor.position;\n    const panel = activeAnchor.panel;\n    const panelSize = panel.size;\n    const alignPos = panel.alignPosition;\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |<------>|<------------>|\n     * [        |<-Anchor      ]\n     */\n    return isNextDirection\n      ? panelSize - alignPos + panel.margin.next\n      : alignPos + panel.margin.prev;\n  }\n}\n\nexport default SnapControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link FreeControl}\n * @ko {@link FreeControl} 생성시 사용되는 옵션\n * @interface\n * @property {boolean} stopAtEdge Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n * <ko>스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다</ko>\n */\nexport interface FreeControlOptions {\n  stopAtEdge: boolean;\n}\n\n/**\n * A {@link Control} that can be scrolled freely without alignment\n * @ko 패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식을 사용하는 {@link Control}\n */\nclass FreeControl extends Control {\n  private _stopAtEdge: FreeControlOptions[\"stopAtEdge\"];\n\n  /**\n   * Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n   * @ko 스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get stopAtEdge() { return this._stopAtEdge; }\n\n  public set stopAtEdge(val: FreeControlOptions[\"stopAtEdge\"]) { this._stopAtEdge = val; }\n\n  /** */\n  public constructor({\n    stopAtEdge = true\n  }: Partial<FreeControlOptions> = {}) {\n    super();\n\n    this._stopAtEdge = stopAtEdge;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(progressInPanel: number): Promise<void> {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      const panelRange = activePanel.range;\n      const newPosition = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      await camera.lookAt(camera.clampToReachablePosition(newPosition));\n    }\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    const camera = flicking.camera;\n    const targetPos = camera.clampToReachablePosition(position);\n\n    const anchorAtPosition = camera.findAnchorIncludePosition(targetPos);\n\n    if (!anchorAtPosition) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const targetPanel = anchorAtPosition.panel;\n\n    // Trigger only change event\n    if (targetPanel !== this._activePanel) {\n      this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n    }\n\n    return this._animateToPosition({ position: this._stopAtEdge ? targetPos : position, duration, newActivePanel: targetPanel, axesEvent });\n  }\n}\n\nexport default FreeControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { clamp, getFlickingAttached, getMinusCompensatedIndex, isBetween } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n/**\n * An options for the {@link StrictControl}\n * @ko {@link StrictControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels that can be moved at a time<ko>최대로 움직일 수 있는 패널의 개수</ko>\n */\nexport interface StrictControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that allow you to select the maximum number of panels to move at a time\n * @ko 한번에 최대로 이동할 패널의 개수를 선택 가능한 {@link Control}\n */\nclass StrictControl extends Control {\n  private _count: number;\n  private _indexRange: { min: number; max: number };\n\n  /**\n   * Maximum number of panels that can be moved at a time\n   * @ko 최대로 움직일 수 있는 패널의 개수\n   * @type {number}\n   * @default 1\n   */\n  public get count() { return this._count; }\n\n  public set count(val: StrictControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = 1\n  }: Partial<StrictControlOptions> = {}) {\n    super();\n\n    this._count = count;\n    this._resetIndexRange();\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy() {\n    super.destroy();\n\n    this._resetIndexRange();\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const renderer = flicking.renderer;\n    const controller = this._controller;\n    const controlParams = camera.controlParams;\n    const count = this._count;\n\n    const activePanel = controller.state.animating\n      ? camera.findNearestAnchor(camera.position)?.panel\n      : this._activePanel;\n\n    if (!activePanel) {\n      controller.update(controlParams);\n      this._resetIndexRange();\n      return this;\n    }\n\n    const cameraRange = controlParams.range;\n    const currentPos = activePanel.position;\n    const currentIndex = activePanel.index;\n    const panelCount = renderer.panelCount;\n\n    let prevPanelIndex = currentIndex - count;\n    let nextPanelIndex = currentIndex + count;\n\n    if (prevPanelIndex < 0) {\n      prevPanelIndex = flicking.circularEnabled\n        ? getMinusCompensatedIndex((prevPanelIndex + 1) % panelCount - 1, panelCount)\n        : clamp(prevPanelIndex, 0, panelCount - 1);\n    }\n    if (nextPanelIndex >= panelCount) {\n      nextPanelIndex = flicking.circularEnabled\n        ? nextPanelIndex % panelCount\n        : clamp(nextPanelIndex, 0, panelCount - 1);\n    }\n\n    const prevPanel = renderer.panels[prevPanelIndex];\n    const nextPanel = renderer.panels[nextPanelIndex];\n\n    let prevPos = Math.max(prevPanel.position, cameraRange.min);\n    let nextPos = Math.min(nextPanel.position, cameraRange.max);\n\n    if (prevPos > currentPos) {\n      prevPos -= camera.rangeDiff;\n    }\n    if (nextPos < currentPos) {\n      nextPos += camera.rangeDiff;\n    }\n\n    controlParams.range = {\n      min: prevPos,\n      max: nextPos\n    };\n\n    if (controlParams.circular) {\n      if (controlParams.position < prevPos) {\n        controlParams.position += camera.rangeDiff;\n      }\n\n      if (controlParams.position > nextPos) {\n        controlParams.position -= camera.rangeDiff;\n      }\n    }\n\n    controlParams.circular = false;\n    controller.update(controlParams);\n\n    this._indexRange = {\n      min: prevPanel.index,\n      max: nextPanel.index\n    };\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n    const axesRange = this._controller.range;\n    const indexRange = this._indexRange;\n    const cameraRange = camera.range;\n\n    const clampedPosition = clamp(camera.clampToReachablePosition(position), axesRange[0], axesRange[1]);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n\n    const isOverThreshold = Math.abs(position - prevPos) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    const anchors = camera.anchorPoints;\n    const firstAnchor = anchors[0];\n    const lastAnchor = anchors[anchors.length - 1];\n\n    const shouldBounceToFirst = position <= cameraRange.min && isBetween(firstAnchor.panel.index, indexRange.min, indexRange.max);\n    const shouldBounceToLast = position >= cameraRange.max && isBetween(lastAnchor.panel.index, indexRange.min, indexRange.max);\n\n    if (shouldBounceToFirst || shouldBounceToLast) {\n      // In bounce area\n      const targetAnchor = position < cameraRange.min ? firstAnchor : lastAnchor;\n\n      targetPanel = targetAnchor.panel;\n      targetPos = targetAnchor.position;\n    } else if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && adjacentAnchor && isBetween(adjacentAnchor.index, indexRange.min, indexRange.max)) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor.panel;\n      targetPos = adjacentAnchor.position;\n    } else {\n      // Restore to active panel\n      targetPos = camera.clampToReachablePosition(activePanel.position);\n      targetPanel = activePanel;\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n\n  protected _setActive = (newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) => {\n    super._setActive(newActivePanel, prevActivePanel, isTrusted);\n    this.updateInput();\n  };\n\n  private _resetIndexRange() {\n    this._indexRange = { min: 0, max: 0 };\n  }\n}\n\nexport default StrictControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport * as ERROR from \"../const/error\";\nimport { ALIGN, DIRECTION, EVENTS } from \"../const/external\";\nimport { checkExistence, clamp, find, getFlickingAttached, getProgress, includes, parseAlign } from \"../utils\";\n\nexport interface CameraOptions {\n  align: FlickingOptions[\"align\"];\n}\n\n/**\n * A component that manages actual movement inside the viewport\n * @ko 뷰포트 내에서의 실제 움직임을 담당하는 컴포넌트\n */\nabstract class Camera {\n  // Options\n  protected _align: FlickingOptions[\"align\"];\n\n  // Internal states\n  protected _flicking: Flicking | null;\n  protected _el: HTMLElement;\n  protected _transform: string;\n  protected _position: number;\n  protected _alignPos: number;\n  protected _offset: number;\n  protected _range: { min: number; max: number };\n  protected _visiblePanels: Panel[];\n  protected _anchors: AnchorPoint[];\n  protected _needPanelTriggered: { prev: boolean; next: boolean };\n\n  // Internal states getter\n  /**\n   * The camera(`.flicking-camera`) element\n   * @ko 카메라(`.flicking-camera`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n  /**\n   * Current position of the camera\n   * @ko Camera의 현재 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._position; }\n  /**\n   * Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at\n   * @ko 패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option\n   * @ko Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get offset() { return this._offset; }\n  /**\n   * A range that Camera's {@link Camera#position position} can reach\n   * @ko Camera의 {@link Camera#position position}이 도달 가능한 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get range() { return this._range; }\n  /**\n   * A difference between Camera's minimum and maximum position that can reach\n   * @ko Camera가 도달 가능한 최소/최대 좌표의 차이\n   * @type {number}\n   * @readonly\n   */\n  public get rangeDiff() { return this._range.max - this._range.min; }\n  /**\n   * An array of visible panels from the current position\n   * @ko 현재 보이는 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   */\n  public get visiblePanels() { return this._visiblePanels; }\n  /**\n   * A range of the visible area from the current position\n   * @ko 현재 위치에서 보이는 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get visibleRange() { return { min: this._position - this._alignPos, max: this._position - this._alignPos + this.size }; }\n  /**\n   * An array of {@link AnchorPoint}s that Camera can be stopped at\n   * @ko 카메라가 도달 가능한 {@link AnchorPoint}의 목록\n   * @type {AnchorPoint[]}\n   * @readonly\n   */\n  public get anchorPoints() { return this._anchors; }\n  /**\n   * A current parameters of the Camera for updating {@link AxesController}\n   * @ko {@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들\n   * @type {ControlParams}\n   * @readonly\n   */\n  public get controlParams() { return { range: this._range, position: this._position, circular: false }; }\n  /**\n   * A Boolean value indicating whether Camera's over the minimum or maximum position reachable\n   * @ko 현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다\n   * @type {boolean}\n   * @readonly\n   */\n  public get atEdge() { return this._position <= this._range.min || this._position >= this._range.max; }\n  /**\n   * Return the size of the viewport\n   * @ko 뷰포트 크기를 반환합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() {\n    const flicking = this._flicking;\n    return flicking\n      ? flicking.horizontal\n        ? flicking.viewport.width\n        : flicking.viewport.height\n      : 0;\n  }\n\n  /**\n   * Return the camera's position progress from the first panel to last panel\n   * Range is from 0 to last panel's index\n   * @ko 첫번째 패널로부터 마지막 패널까지의 카메라 위치의 진행도를 반환합니다\n   * 범위는 0부터 마지막 패널의 인덱스까지입니다\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n    const position = this._position + this._offset;\n    const nearestAnchor = this.findNearestAnchor(this._position);\n\n    if (!flicking || !nearestAnchor) {\n      return NaN;\n    }\n\n    const nearestPanel = nearestAnchor.panel;\n    const panelPos = nearestPanel.position + nearestPanel.offset;\n    const bounceSize = flicking.control.controller.bounce!;\n\n    const { min: prevRange, max: nextRange } = this.range;\n    const rangeDiff = this.rangeDiff;\n\n    if (position === panelPos) {\n      return nearestPanel.index;\n    }\n\n    if (position < panelPos) {\n      const prevPanel = nearestPanel.prev();\n      let prevPosition = prevPanel\n        ? prevPanel.position + prevPanel.offset\n        : prevRange - bounceSize[0];\n\n      // Looped\n      if (prevPosition > panelPos) {\n        prevPosition -= rangeDiff;\n      }\n\n      return nearestPanel.index - 1 + getProgress(position, prevPosition, panelPos);\n    } else {\n      const nextPanel = nearestPanel.next();\n      let nextPosition = nextPanel\n        ? nextPanel.position + nextPanel.offset\n        : nextRange + bounceSize[1];\n\n      // Looped\n      if (nextPosition < panelPos) {\n        nextPosition += rangeDiff;\n      }\n\n      return nearestPanel.index + getProgress(position, panelPos, nextPosition);\n    }\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element\n   * @ko {@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n  }\n\n  /** */\n  public constructor({\n    align = ALIGN.CENTER\n  }: Partial<CameraOptions> = {}) {\n    this._flicking = null;\n    this._resetInternalValues();\n\n    // Options\n    this._align = align;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @method\n   * @abstract\n   * @memberof Camera\n   * @instance\n   * @name updateRange\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public abstract updateRange(): this;\n\n  /**\n   * Initialize Camera\n   * @ko Camera를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n   * <ko>{@link ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    const viewportEl = flicking.viewport.element;\n\n    checkExistence(viewportEl.firstElementChild, \"First element child of the viewport element\");\n    this._el = viewportEl.firstElementChild as HTMLElement;\n    this._checkTranslateSupport();\n\n    return this;\n  }\n\n  /**\n   * Destroy Camera and return to initial state\n   * @ko Camera를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): this {\n    this._flicking = null;\n    this._resetInternalValues();\n    return this;\n  }\n\n  /**\n   * Move to the given position and apply CSS transform\n   * @ko 해당 좌표로 이동하고, CSS transform을 적용합니다\n   * @param {number} pos A new position<ko>움직일 위치</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public async lookAt(pos: number): Promise<void> {\n    const prevPos = this._position;\n\n    this._position = pos;\n    await this._refreshVisiblePanels();\n    this._checkNeedPanel();\n    this._checkReachEnd(prevPos, pos);\n    this._applyTransform();\n  }\n\n  /**\n   * Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>\n   */\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index - 1] || null;\n  }\n\n  /**\n   * Return a next {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>\n   */\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index + 1] || null;\n  }\n\n  /**\n   * Return the camera's position progress in the panel below\n   * Value is from 0 to 1 when the camera's inside panel\n   * Value can be lower than 0 or bigger than 1 when it's in the margin area\n   * @ko 현재 카메라 아래 패널에서의 위치 진행도를 반환합니다\n   * 반환값은 카메라가 패널 내부에 있을 경우 0부터 1까지의 값을 갖습니다\n   * 패널의 margin 영역에 있을 경우 0보다 작거나 1보다 큰 값을 반환할 수 있습니다\n   */\n  public getProgressInPanel(panel: Panel) {\n    const panelRange = panel.range;\n\n    return (this._position - panelRange.min) / (panelRange.max - panelRange.min);\n  }\n\n  /**\n   * Return {@link AnchorPoint} that includes given position\n   * If there's no {@link AnchorPoint} that includes the given position, return `null` instead\n   * @ko 주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n   * 주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>\n   */\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n    const anchorsIncludingPosition = anchors.filter(anchor => anchor.panel.includePosition(position, true));\n\n    return anchorsIncludingPosition.reduce((nearest: AnchorPoint | null, anchor) => {\n      if (!nearest) return anchor;\n\n      return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n        ? nearest\n        : anchor;\n    }, null);\n  }\n\n  /**\n   * Return {@link AnchorPoint} nearest to given position\n   * If there're no {@link AnchorPoint}s, return `null` instead\n   * @ko 해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n   * {@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>\n   */\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    let prevDist = Infinity;\n    for (let anchorIdx = 0; anchorIdx < anchors.length; anchorIdx++) {\n      const anchor = anchors[anchorIdx];\n      const dist = Math.abs(anchor.position - position);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return anchors[anchorIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return anchors[anchors.length - 1];\n  }\n\n  /**\n   * Return {@link AnchorPoint} that matches {@link Flicking#currentPanel}\n   * @ko 현재 {@link Flicking#currentPanel}에 해당하는 {@link AnchorPoint}를 반환합니다\n   * @return {AnchorPoint | null}\n   */\n  public findActiveAnchor(): AnchorPoint | null {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const activeIndex = flicking.control.activeIndex;\n\n    return find(this._anchors, anchor => anchor.panel.index === activeIndex);\n  }\n\n  /**\n   * Clamp the given position between camera's range\n   * @ko 주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다\n   * @param {number} position A position to clamp<ko>범위를 제한할 좌표</ko>\n   * @return {number} A clamped position<ko>범위 제한된 좌표</ko>\n   */\n  public clampToReachablePosition(position: number): number {\n    const range = this._range;\n    return clamp(position, range.min, range.max);\n  }\n\n  /**\n   * Check whether the given panel is inside of the Camera's range\n   * @ko 해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return {boolean} Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>\n   */\n  public canReach(panel: Panel): boolean {\n    const range = this._range;\n\n    if (panel.removed) return false;\n\n    const panelPos = panel.position;\n\n    return panelPos >= range.min && panelPos <= range.max;\n  }\n\n  /**\n   * Check whether the given panel element is visible at the current position\n   * @ko 현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>\n   */\n  public canSee(panel: Panel): boolean {\n    const visibleRange = this.visibleRange;\n    // Should not include margin, as we don't declare what the margin is visible as what the panel is visible.\n    return panel.includeRange(visibleRange.min, visibleRange.max, false);\n  }\n\n  /**\n   * Update Camera's {@link Camera#alignPosition alignPosition}\n   * @ko Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateAlignPos(): this {\n    const align = this._align;\n\n    const alignVal = typeof align === \"object\"\n      ? (align as { camera: string | number }).camera\n      : align;\n\n    this._alignPos = parseAlign(alignVal, this.size);\n\n    return this;\n  }\n\n  /**\n   * Update Camera's {@link Camera#anchorPoints anchorPoints}\n   * @ko Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    this._anchors = panels.map((panel, index) => new AnchorPoint({\n      index,\n      position: panel.position,\n      panel\n    }));\n\n    return this;\n  }\n\n  /**\n   * Update Viewport's height to active panel's height\n   * @ko 현재 선택된 패널의 높이와 동일하도록 뷰포트의 높이를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAdaptiveHeight() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const activePanel = flicking.control.activePanel;\n\n    if (!flicking.horizontal || !flicking.adaptive || !activePanel) return;\n\n    flicking.viewport.setSize({\n      height: activePanel.height\n    });\n  }\n\n  public updateOffset() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const unRenderedPanels = flicking.panels.filter(panel => !panel.rendered);\n    const position = this._position;\n\n    this._offset = unRenderedPanels\n      .filter(panel => panel.position + panel.offset < position)\n      .reduce((offset, panel) => offset + panel.sizeIncludingMargin, 0);\n\n    this._applyTransform();\n  }\n\n  /**\n   * Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again\n   * @ko 발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetNeedPanelHistory(): this {\n    this._needPanelTriggered = { prev: false, next: false };\n    return this;\n  }\n\n  protected _resetInternalValues() {\n    this._position = 0;\n    this._alignPos = 0;\n    this._offset = 0;\n    this._range = { min: 0, max: 0 };\n    this._visiblePanels = [];\n    this._anchors = [];\n    this._needPanelTriggered = { prev: false, next: false };\n  }\n\n  protected async _refreshVisiblePanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    const newVisiblePanels = panels.filter(panel => this.canSee(panel));\n    const prevVisiblePanels = this._visiblePanels;\n    this._visiblePanels = newVisiblePanels;\n\n    const added: Panel[] = newVisiblePanels.filter(panel => !includes(prevVisiblePanels, panel));\n    const removed: Panel[] = prevVisiblePanels.filter(panel => !includes(newVisiblePanels, panel));\n\n    if (added.length > 0 || removed.length > 0) {\n      await flicking.renderer.render();\n\n      flicking.trigger(new ComponentEvent(EVENTS.VISIBLE_CHANGE, {\n        added,\n        removed,\n        visiblePanels: newVisiblePanels\n      }));\n    }\n  }\n\n  protected _checkNeedPanel(): void {\n    const needPanelTriggered = this._needPanelTriggered;\n\n    if (needPanelTriggered.prev && needPanelTriggered.next) return;\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      if (!needPanelTriggered.prev) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n      if (!needPanelTriggered.next) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n\n      return;\n    }\n\n    const cameraPosition = this._position;\n    const cameraSize = this.size;\n    const cameraRange = this._range;\n    const needPanelThreshold = flicking.needPanelThreshold;\n\n    const cameraPrev = cameraPosition - this._alignPos;\n    const cameraNext = cameraPrev + cameraSize;\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    if (!needPanelTriggered.prev) {\n      const firstPanelPrev = firstPanel.range.min;\n\n      if (cameraPrev <= (firstPanelPrev + needPanelThreshold) || cameraPosition <= (cameraRange.min + needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n    }\n\n    if (!needPanelTriggered.next) {\n      const lastPanelNext = lastPanel.range.max;\n\n      if (cameraNext >= (lastPanelNext - needPanelThreshold) || cameraPosition >= (cameraRange.max - needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n    }\n  }\n\n  protected _checkReachEnd(prevPos: number, newPos: number): void {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const range = this._range;\n\n    const wasBetweenRange = prevPos > range.min && prevPos < range.max;\n    const isBetweenRange = newPos > range.min && newPos < range.max;\n\n    if (!wasBetweenRange || isBetweenRange) return;\n\n    const direction = newPos <= range.min ? DIRECTION.PREV : DIRECTION.NEXT;\n\n    flicking.trigger(new ComponentEvent(EVENTS.REACH_EDGE, {\n      direction\n    }));\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _checkTranslateSupport = () => {\n    const transforms = [\"webkitTransform\", \"msTransform\", \"MozTransform\", \"OTransform\", \"transform\"];\n\n    const supportedStyle = document.documentElement.style;\n    let transformName = \"\";\n    for (const prefixedTransform of transforms) {\n      if (prefixedTransform in supportedStyle) {\n        transformName = prefixedTransform;\n      }\n    }\n\n    if (!transformName) {\n      throw new FlickingError(ERROR.MESSAGE.TRANSFORM_NOT_SUPPORTED, ERROR.CODE.TRANSFORM_NOT_SUPPORTED);\n    }\n\n    this._transform = transformName;\n  };\n}\n\nexport default Camera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that can move from the position of the first panel to the position of the last panel\n * @ko 첫번째 패널의 좌표로부터 마지막 패널의 좌표로까지 이동할 수 있는 종류의 {@link Camera}\n */\nclass LinearCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    this._range = { min: firstPanel?.position ?? 0, max: lastPanel?.position ?? 0 };\n    return this;\n  }\n}\n\nexport default LinearCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { DIRECTION } from \"../const/external\";\nimport { circulatePosition, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A data of the position that changes order of the panel elements\n * @ko 패널 엘리먼트 순서가 변경되는 좌표의 데이터\n * @interface\n * @property {Panel} panel Toggling panel<ko>순서를 변경할 패널</ko>\n * @property {DIRECTION} direction Toggling position<ko>순서를 변경할 방향</ko>\n * @property {boolean} toggled Whether the panel has toggled its position to `direction`<ko>`direction` 방향으로 패널 위치를 변경했는지 여부를 나타내는 값</ko>\n */\nexport interface TogglePoint {\n  panel: Panel;\n  direction: ValueOf<typeof DIRECTION>;\n  toggled: boolean;\n}\n\n/**\n * A {@link Camera} that connects the last panel and the first panel, enabling continuous loop\n * @ko 첫번째 패널과 마지막 패널이 이어진 상태로, 무한히 회전할 수 있는 종류의 {@link Camera}\n */\nclass CircularCamera extends Camera {\n  private _circularOffset: number = 0;\n  private _circularEnabled: boolean = false;\n\n  public get offset() { return this._offset - this._circularOffset; }\n  public get controlParams() { return { range: this._range, position: this._position, circular: this._circularEnabled }; }\n\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    if (!this._circularEnabled || anchor.index !== 0) return super.getPrevAnchor(anchor);\n\n    const anchors = this._anchors;\n    const rangeDiff = this.rangeDiff;\n    const lastAnchor = anchors[anchors.length - 1];\n\n    return new AnchorPoint({\n      index: lastAnchor.index,\n      position: lastAnchor.position - rangeDiff,\n      panel: lastAnchor.panel\n    });\n  }\n\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (!this._circularEnabled || anchor.index !== anchors.length - 1) return super.getNextAnchor(anchor);\n\n    const rangeDiff = this.rangeDiff;\n    const firstAnchor = anchors[0];\n\n    return new AnchorPoint({\n      index: firstAnchor.index,\n      position: firstAnchor.position + rangeDiff,\n      panel: firstAnchor.panel\n    });\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    if (!this._circularEnabled) return super.findAnchorIncludePosition(position);\n\n    const range = this._range;\n    const positionInRange = circulatePosition(position, range.min, range.max);\n    const anchorInRange = super.findAnchorIncludePosition(positionInRange);\n\n    if (!anchorInRange) return null;\n\n    const rangeDiff = this.rangeDiff;\n\n    if (position < range.min) {\n      const loopCount = -Math.floor((range.min - position) / rangeDiff) - 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    } else if (position > range.max) {\n      const loopCount = Math.floor((position - range.max) / rangeDiff) + 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    }\n\n    return anchorInRange;\n  }\n\n  public clampToReachablePosition(position: number): number {\n    // Basically all position is reachable for circular camera\n    return this._circularEnabled\n      ? position\n      : super.clampToReachablePosition(position);\n  }\n\n  public canReach(panel: Panel): boolean {\n    if (panel.removed) return false;\n\n    return this._circularEnabled\n      // Always reachable on circular mode\n      ? true\n      : super.canReach(panel);\n  }\n\n  public canSee(panel: Panel): boolean {\n    const range = this._range;\n    const rangeDiff = this.rangeDiff;\n    const visibleRange = this.visibleRange;\n    const visibleInCurrentRange = super.canSee(panel);\n\n    if (!this._circularEnabled) {\n      return visibleInCurrentRange;\n    }\n\n    // Check looped visible area for circular case\n    if (visibleRange.min < range.min) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min + rangeDiff, visibleRange.max + rangeDiff, false);\n    } else if (visibleRange.max > range.max) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min - rangeDiff, visibleRange.max - rangeDiff, false);\n    }\n\n    return visibleInCurrentRange;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const panels = renderer.panels;\n    if (panels.length <= 0) {\n      this._resetInternalValues();\n      return this;\n    }\n\n    const firstPanel = panels[0]!;\n    const lastPanel = panels[panels.length - 1]!;\n    const firstPanelPrev = firstPanel.range.min - firstPanel.margin.prev;\n    const lastPanelNext = lastPanel.range.max + lastPanel.margin.next;\n\n    const visibleSize = this.size;\n    const panelSizeSum = lastPanelNext - firstPanelPrev;\n\n    const canSetCircularMode = panels\n      .every(panel => panelSizeSum - panel.size >= visibleSize);\n    this._circularEnabled = canSetCircularMode;\n\n    if (canSetCircularMode) {\n      this._range = { min: firstPanelPrev, max: lastPanelNext };\n\n      panels.forEach(panel => panel.updateCircularToggleDirection());\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    this._updateCircularOffset();\n\n    return this;\n  }\n\n  public async lookAt(pos: number) {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const prevPos = this._position;\n\n    if (pos === prevPos) return await super.lookAt(pos);\n\n    const panels = flicking.renderer.panels;\n    const toggled = panels.map(panel => panel.toggle(prevPos, pos));\n\n    this._position = pos;\n\n    if (toggled.some(isToggled => isToggled)) {\n      this._updateCircularOffset();\n      await flicking.renderer.render();\n    }\n\n    return await super.lookAt(pos);\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset + this._circularOffset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _resetInternalValues() {\n    super._resetInternalValues();\n    this._circularOffset = 0;\n    this._circularEnabled = false;\n  }\n\n  private _calcPanelAreaSum(panels: Panel[]) {\n    return panels.reduce((sum: number, panel: Panel) => sum + panel.sizeIncludingMargin, 0);\n  }\n\n  private _updateCircularOffset() {\n    if (!this._circularEnabled) {\n      this._circularOffset = 0;\n      return;\n    }\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const toggledPrev: Panel[] = [];\n    const toggledNext: Panel[] = [];\n\n    flicking.panels\n      .filter(panel => panel.toggled)\n      .forEach(panel => {\n        if (panel.toggleDirection === DIRECTION.PREV) {\n          toggledPrev.push(panel);\n        } else {\n          toggledNext.push(panel);\n        }\n      });\n\n    this._circularOffset = this._calcPanelAreaSum(toggledPrev) - this._calcPanelAreaSum(toggledNext);\n  }\n}\n\nexport default CircularCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { getFlickingAttached, parseAlign } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that set range not to go out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n * @ko 첫번째와 마지막 패널 밖으로 넘어가지 못하도록 범위를 설정하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 종류의 {@link Camera}\n */\nclass BoundCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n    const alignPos = this._alignPos;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    if (!firstPanel || !lastPanel) {\n      this._range = { min: 0, max: 0 };\n      return this;\n    }\n\n    const viewportSize = this.size;\n    const firstPanelPrev = firstPanel.range.min;\n    const lastPanelNext = lastPanel.range.max;\n    const panelAreaSize = lastPanelNext - firstPanelPrev;\n    const isBiggerThanViewport = viewportSize < panelAreaSize;\n\n    const firstPos = firstPanelPrev + alignPos;\n    const lastPos = lastPanelNext - viewportSize + alignPos;\n\n    if (isBiggerThanViewport) {\n      this._range = { min: firstPos, max: lastPos };\n    } else {\n      const align = this._align;\n      const alignVal = typeof align === \"object\"\n        ? (align as { camera: string | number }).camera\n        : align;\n\n      const pos = firstPos + parseAlign(alignVal, lastPos - firstPos);\n\n      this._range = { min: pos, max: pos };\n    }\n\n    return this;\n  }\n\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      this._anchors = [];\n      return this;\n    }\n\n    const range = this._range;\n    const reachablePanels = panels.filter(panel => this.canReach(panel));\n\n    if (reachablePanels.length > 0) {\n      const shouldPrependBoundAnchor = reachablePanels[0].position !== range.min;\n      const shouldAppendBoundAnchor = reachablePanels[reachablePanels.length - 1].position !== range.max;\n      const indexOffset = shouldPrependBoundAnchor ? 1 : 0;\n\n      const newAnchors = reachablePanels.map((panel, idx) => new AnchorPoint({\n        index: idx + indexOffset,\n        position: panel.position,\n        panel\n      }));\n\n      if (shouldPrependBoundAnchor) {\n        newAnchors.splice(0, 0, new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panels[reachablePanels[0].index - 1]\n        }));\n      }\n\n      if (shouldAppendBoundAnchor) {\n        newAnchors.push(new AnchorPoint({\n          index: newAnchors.length,\n          position: range.max,\n          panel: panels[reachablePanels[reachablePanels.length - 1].index + 1]\n        }));\n      }\n\n      this._anchors = newAnchors;\n    } else if (range.min !== range.max) {\n      // There're more than 2 panels\n      const nearestPanelAtMin = this._findNearestPanel(range.min, panels);\n      const panelAtMin = nearestPanelAtMin.index === panels.length - 1\n        ? nearestPanelAtMin.prev()!\n        : nearestPanelAtMin;\n      const panelAtMax = panelAtMin.next()!;\n\n      this._anchors = [\n        new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panelAtMin\n        }),\n        new AnchorPoint({\n          index: 1,\n          position: range.max,\n          panel: panelAtMax\n        })\n      ];\n    } else {\n      this._anchors = [new AnchorPoint({\n        index: 0,\n        position: range.min,\n        panel: this._findNearestPanel(range.min, panels)\n      })];\n    }\n\n    return this;\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const range = this._range;\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    if (position <= range.min) {\n      return anchors[0];\n    } else if (position >= range.max) {\n      return anchors[anchors.length - 1];\n    } else {\n      return super.findAnchorIncludePosition(position);\n    }\n  }\n\n  private _findNearestPanel(pos: number, panels: Panel[]): Panel {\n    let prevDist = Infinity;\n    for (let panelIdx = 0; panelIdx < panels.length; panelIdx++) {\n      const panel = panels[panelIdx];\n      const dist = Math.abs(panel.position - pos);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return panels[panelIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return panels[panels.length - 1];\n  }\n}\n\nexport default BoundCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { ALIGN, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached, getMinusCompensatedIndex, includes } from \"../utils\";\n\nexport interface RendererOptions {\n  align: FlickingOptions[\"align\"];\n}\n\n/**\n * A component that manages {@link Panel} and its elements\n * @ko {@link Panel}과 그 엘리먼트들을 관리하는 컴포넌트\n */\nabstract class Renderer {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _panels: Panel[];\n\n  // Options\n  protected _align: RendererOptions[\"align\"];\n\n  // Internal states Getter\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._panels.length; }\n\n  // Options Getter\n  /**\n   * A {@link Panel}'s {@link Panel#align align} value that applied to all panels\n   * @ko {@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: RendererOptions[\"align\"]) {\n    this._align = val;\n\n    const panelAlign = this._getPanelAlign();\n    this._panels.forEach(panel => { panel.align = panelAlign; });\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An {@link Flicking#align align} value that will be applied to all panels<ko>전체 패널에 적용될 {@link Flicking#align align} 값</ko>\n   */\n  public constructor({\n    align = ALIGN.CENTER\n  }: Partial<RendererOptions> = {}) {\n    this._flicking = null;\n    this._panels = [];\n\n    // Bind options\n    this._align = align;\n  }\n\n  /**\n   * Render panel elements inside the camera element\n   * @ko 패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다\n   * @method\n   * @abstract\n   * @memberof Renderer\n   * @instance\n   * @name render\n   * @chainable\n   * @return {this}\n   */\n  public abstract render(): Promise<void>;\n  public abstract forceRenderAllPanels(): Promise<void>;\n\n  protected abstract _collectPanels(): void;\n  protected abstract _createPanel(el: any, options: PanelOptions): Panel;\n  protected abstract _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void;\n  protected abstract _removePanelElements(panels: Panel[]): void;\n\n  /**\n   * Initialize Renderer\n   * @ko Renderer를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._collectPanels();\n\n    return this;\n  }\n\n  /**\n   * Destroy Renderer and return to initial state\n   * @ko Renderer를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._flicking = null;\n    this._panels = [];\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   */\n  public getPanel(index: number): Panel | null {\n    return this._panels[index] || null;\n  }\n\n  /**\n   * Update all panel sizes\n   * @ko 모든 패널의 크기를 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updatePanelSize(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    if (flicking.panelsPerView > 0) {\n      this._updatePanelSizeByGrid(flicking);\n    } else {\n      flicking.panels.forEach(panel => panel.resize());\n    }\n\n    return this;\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {any[]} elements An array of element or framework component with element in it<ko>엘리먼트의 배열 혹은 프레임워크에서 엘리먼트를 포함한 컴포넌트들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   */\n  public batchInsert(...items: Array<{\n    index: number;\n    elements: any[];\n  }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { control } = flicking;\n    const align = this._getPanelAlign();\n\n    const allPanelsInserted = items.reduce((addedPanels, item) => {\n      const insertingIdx = getMinusCompensatedIndex(item.index, panels.length);\n      const panelsPushed = panels.slice(insertingIdx);\n      const panelsInserted = item.elements.map(el => this._createPanel(el, { index: insertingIdx, align, flicking }));\n\n      panels.splice(insertingIdx, 0, ...panelsInserted);\n\n      // Resize the newly added panels\n      panelsInserted.forEach(panel => panel.resize());\n\n      const insertedSize = this._getPanelSizeSum(panelsInserted);\n\n      // Update panel indexes & positions\n      panelsPushed.forEach(panel => {\n        panel.increaseIndex(panelsInserted.length);\n        panel.increasePosition(insertedSize);\n      });\n\n      // Insert the actual elements as camera element's children\n      this._insertPanelElements(panelsInserted, panelsPushed[0] ?? null);\n\n      return [...addedPanels, ...panelsInserted];\n    }, []);\n\n    if (allPanelsInserted.length <= 0) return [];\n\n    // Update camera & control\n    this._updateCameraAndControl();\n\n    void this.render();\n\n    // Move to the first panel added if no panels existed\n    // FIXME: fix for animating case\n    if (allPanelsInserted.length > 0 && !control.animating) {\n      void control.moveToPanel(control.activePanel || allPanelsInserted[0], {\n        duration: 0\n      }).catch(() => void 0);\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: allPanelsInserted,\n      removed: []\n    }));\n\n    return allPanelsInserted;\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public batchRemove(...items: Array<{ index: number; deleteCount: number }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { camera, control } = flicking;\n    const activePanel = control.activePanel;\n    const activeIndex = control.activeIndex;\n\n    const allPanelsRemoved = items.reduce((removed, item) => {\n      const { index, deleteCount } = item;\n      const removingIdx = getMinusCompensatedIndex(index, panels.length);\n\n      const panelsPulled = panels.slice(removingIdx + deleteCount);\n      const panelsRemoved = panels.splice(removingIdx, deleteCount);\n\n      if (panelsRemoved.length <= 0) return [];\n\n      // Update panel indexes & positions\n      const removedSize = this._getPanelSizeSum(panelsRemoved);\n      panelsPulled.forEach(panel => {\n        panel.decreaseIndex(panelsRemoved.length);\n        panel.decreasePosition(removedSize);\n      });\n\n      this._removePanelElements(panelsRemoved);\n\n      // Remove panel elements\n      panelsRemoved.forEach(panel => panel.destroy());\n\n      // Update camera & control\n      this._updateCameraAndControl();\n\n      if (includes(panelsRemoved, activePanel)) {\n        control.resetActive();\n      }\n\n      return [...removed, ...panelsRemoved];\n    }, []);\n\n    void this.render();\n\n    // FIXME: fix for animating case\n    if (allPanelsRemoved.length > 0 && !control.animating) {\n      const targetPanel = includes(allPanelsRemoved, activePanel)\n        ? (panels[activeIndex] || panels[panels.length - 1])\n        : activePanel;\n\n      if (targetPanel) {\n        void control.moveToPanel(targetPanel, {\n          duration: 0\n        }).catch(() => void 0);\n      } else {\n        // All panels removed\n        void camera.lookAt(0);\n      }\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: [],\n      removed: allPanelsRemoved\n    }));\n\n    return allPanelsRemoved;\n  }\n\n  protected _getPanelAlign() {\n    const align = this._align;\n\n    return typeof align === \"object\"\n      ? (align as { panel: string | number }).panel\n      : align;\n  }\n\n  protected _getPanelSizeSum(panels: Panel[]): number {\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    const marginDiff = lastPanel.margin.next - firstPanel.margin.prev;\n\n    return (lastPanel.range.max - firstPanel.range.min) + marginDiff;\n  }\n\n  protected _updateCameraAndControl() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const { camera, control } = flicking;\n\n    camera.updateRange();\n    camera.updateAnchors();\n    camera.resetNeedPanelHistory();\n    control.updateInput();\n  }\n\n  protected _updateRenderingPanels(): void {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    if (flicking.renderOnlyVisible) {\n      this._showOnlyVisiblePanels(flicking);\n    } else {\n      flicking.panels.forEach(panel => panel.markForShow());\n    }\n  }\n\n  protected _showOnlyVisiblePanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n\n  protected _updatePanelSizeByGrid(flicking: Flicking) {\n    const panels = flicking.panels;\n    const panelsPerView = flicking.panelsPerView;\n\n    if (panelsPerView <= 0) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"panelsPerView\", panelsPerView), ERROR.CODE.WRONG_OPTION);\n    }\n    if (panels.length <= 0) return;\n\n    // resize only the first panel\n    const firstPanel = panels[0];\n    firstPanel.resize();\n\n    const viewportSize = flicking.camera.size;\n    const gap = firstPanel.margin.prev + firstPanel.margin.next;\n\n    const panelSize = (viewportSize - gap * (panelsPerView - 1)) / panelsPerView;\n    const panelSizeObj = flicking.horizontal\n      ? { width: panelSize }\n      : { height: panelSize };\n    const firstPanelSizeObj = {\n      size: panelSize,\n      height: firstPanel.height,\n      margin: firstPanel.margin\n    };\n\n    if (!flicking.noPanelStyleOverride) {\n      flicking.panels.forEach(panel => panel.setSize(panelSizeObj));\n    }\n\n    flicking.panels.forEach(panel => panel.resize(firstPanelSizeObj));\n  }\n}\n\nexport default Renderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { getProgress, getStyle, isString, parseAlign } from \"../../utils\";\nimport { ALIGN, DIRECTION } from \"../../const/external\";\nimport { LiteralUnion, ValueOf } from \"../../type/internal\";\n\nexport interface PanelOptions {\n  index: number;\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number;\n  flicking: Flicking;\n}\n\nabstract class Panel {\n  // Internal States\n  protected _flicking: Flicking;\n  protected _index: number;\n  protected _pos: number;\n  protected _size: number;\n  protected _height: number;\n  protected _margin: { prev: number; next: number };\n  protected _alignPos: number; // Actual align pos\n  protected _removed: boolean;\n  protected _toggleDirection: ValueOf<typeof DIRECTION>;\n  protected _toggled: boolean;\n  protected _togglePosition: number;\n\n  // Options\n  protected _align: PanelOptions[\"align\"];\n\n  // Internal States Getter\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  abstract get element(): HTMLElement;\n  /**\n   * Index of the panel\n   * @ko 패널의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of the panel, including {@link Panel#alignPosition alignPosition}\n   * @ko 패널의 현재 좌표, {@link Panel#alignPosition alignPosition}을 포함하고 있습니다\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos + this._alignPos; }\n  /**\n   * Cached size of the panel element\n   * This is equal to {@link Panel#element element}'s `offsetWidth` if {@link Flicking#horizontal horizontal} is `true`, and `offsetHeight` else\n   * @ko 패널 엘리먼트의 캐시된 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 {@link Panel#element element}의 `offsetWidth`와 동일하고, `false`일 경우 `offsetHeight`와 동일합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() { return this._size; }\n  /**\n   * Panel's size including CSS `margin`\n   * This value includes {@link Panel#element element}'s margin left/right if {@link Flicking#horizontal horizontal} is `true`, and margin top/bottom else\n   * @ko CSS `margin`을 포함한 패널의 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 margin left/right을 포함하고, `false`일 경우 margin top/bottom을 포함합니다\n   * @type {number}\n   * @readonly\n   */\n  public get sizeIncludingMargin() { return this._size + this._margin.prev + this._margin.next; }\n  /**\n   * Height of the panel element\n   * @ko 패널 엘리먼트의 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height; }\n  /**\n   * Cached CSS `margin` value of the panel element\n   * @ko 패널 엘리먼트의 CSS `margin` 값\n   * @type {object}\n   * @property {number} prev CSS `margin-left` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-top` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-left`, `false`일 경우 `margin-top`에 해당하는 값</ko>\n   * @property {number} next CSS `margin-right` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-bottom` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-right`, `false`일 경우 `margin-bottom`에 해당하는 값</ko>\n   * @readonly\n   */\n  public get margin() { return this._margin; }\n  /**\n   * Align position inside the panel where {@link Camera}'s {@link Camera#alignPosition alignPosition} inside viewport should be located at\n   * @ko 패널의 정렬 기준 위치. {@link Camera}의 뷰포트 내에서의 {@link Camera#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * A value indicating whether the panel's {@link Flicking#remove remove}d\n   * @ko 패널이 {@link Flicking#remove remove}되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get removed() { return this._removed; }\n  /**\n   * A value indicating whether the panel's element is being rendered on the screen\n   * @ko 패널의 엘리먼트가 화면상에 렌더링되고있는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract get rendered();\n  /**\n   * Panel element's range of the bounding box\n   * @ko 패널 엘리먼트의 Bounding box 범위\n   * @type {object}\n   * @property {number} [min] Bounding box's left({@link Flicking#horizontal horizontal}: true) / top({@link Flicking#horizontal horizontal}: false)\n   * @property {number} [max] Bounding box's right({@link Flicking#horizontal horizontal}: true) / bottom({@link Flicking#horizontal horizontal}: false)\n   * @readonly\n   */\n  public get range() { return { min: this._pos, max: this._pos + this._size }; }\n  /**\n   * A value indicating whether the panel's position is toggled by circular behavior\n   * @ko 패널의 위치가 circular 동작에 의해 토글되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get toggled() { return this._toggled; }\n  /**\n   * A direction where the panel's position is toggled\n   * @ko 패널의 위치가 circular 동작에 의해 토글되는 방향\n   * @type {DIRECTION}\n   * @readonly\n   */\n  public get toggleDirection() { return this._toggleDirection; }\n  /**\n   * Actual position offset determined by {@link Panel#order}\n   * @ko {@link Panel#order}에 의한 실제 위치 변경값\n   * @type {number}\n   * @readonly\n   */\n  public get offset() {\n    const toggleDirection = this._toggleDirection;\n    const cameraRangeDiff = this._flicking.camera.rangeDiff;\n\n    return toggleDirection === DIRECTION.NONE || !this._toggled\n      ? 0\n      : toggleDirection === DIRECTION.PREV\n        ? -cameraRangeDiff\n        : cameraRangeDiff;\n  }\n\n  /**\n   * Progress of movement between previous or next panel relative to current panel\n   * @ko 이 패널로부터 이전/다음 패널으로의 이동 진행률\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n\n    return this.index - flicking.camera.progress;\n  }\n\n  /**\n   * Progress of movement between points that panel is completely invisible outside of viewport(prev direction: -1, selected point: 0, next direction: 1)\n   * @ko 현재 패널이 뷰포트 영역 밖으로 완전히 사라지는 지점을 기준으로 하는 진행도(prev방향: -1, 선택 지점: 0, next방향: 1)\n   * @type {number}\n   * @readonly\n   */\n  public get outsetProgress() {\n    const position = this.position + this.offset;\n    const alignPosition = this._alignPos;\n    const camera = this._flicking.camera;\n    const camPos = camera.position;\n\n    if (camPos === position) {\n      return 0;\n    }\n\n    if (camPos < position) {\n      const disappearPosNext = position + (camera.size - camera.alignPosition) + alignPosition;\n\n      return -getProgress(camPos, position, disappearPosNext);\n    } else {\n      const disappearPosPrev = position - (camera.alignPosition + this._size - alignPosition);\n\n      return 1 - getProgress(camPos, disappearPosPrev, position);\n    }\n  }\n\n  /**\n   * Percentage of area where panel is visible in the viewport\n   * @ko 뷰포트 안에서 패널이 보이는 영역의 비율\n   * @type {number}\n   * @readonly\n   */\n  public get visibleRatio() {\n    const range = this.range;\n    const size = this._size;\n    const offset = this.offset;\n    const visibleRange = this._flicking.camera.visibleRange;\n\n    const checkingRange = {\n      min: range.min + offset,\n      max: range.max + offset\n    };\n\n    if (checkingRange.max <= visibleRange.min || checkingRange.min >= visibleRange.max) {\n      return 0;\n    }\n\n    let visibleSize = size;\n\n    if (visibleRange.min > checkingRange.min) {\n      visibleSize -= visibleRange.min - checkingRange.min;\n    }\n    if (visibleRange.max < checkingRange.max) {\n      visibleSize -= checkingRange.max - visibleRange.max;\n    }\n\n    return visibleSize / size;\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Panel#alignPosition alignPosition} should be located at inside the panel element\n   * @ko {@link Panel#alignPosition alignPosition}이 패널 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Getter\n  public set align(val: PanelOptions[\"align\"]) { this._align = val; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor({\n    index,\n    align,\n    flicking\n  }: PanelOptions) {\n    this._index = index;\n    this._flicking = flicking;\n\n    this._align = align;\n\n    this._removed = false;\n    this._resetInternalStates();\n  }\n\n  /**\n   * Mark panel element to be appended on the camera element\n   * @internal\n   */\n  public abstract markForShow();\n\n  /**\n   * Mark panel element to be removed from the camera element\n   * @internal\n   */\n  public abstract markForHide();\n\n  /**\n   * Update size of the panel\n   * @ko 패널의 크기를 갱신합니다\n   * @param {object} cached Predefined cached size of the panel<ko>사전에 캐시된 패널의 크기 정보</ko>\n   * @chainable\n   * @return {this}\n   */\n  public resize(cached?: {\n    size: number;\n    height: number;\n    margin: { prev: number; next: number };\n  }): this {\n    const el = this.element;\n    const elStyle = getStyle(el);\n    const flicking = this._flicking;\n    const horizontal = flicking.horizontal;\n    const prevPanel = flicking.renderer.panels[this._index - 1];\n\n    if (cached) {\n      this._size = cached.size;\n      this._margin = { ...cached.margin };\n      this._height = cached.height;\n    } else {\n      this._size = horizontal ? el.offsetWidth : el.offsetHeight;\n      this._margin = horizontal\n        ? {\n          prev: parseFloat(elStyle.marginLeft || \"0\"),\n          next: parseFloat(elStyle.marginRight || \"0\")\n        } : {\n          prev: parseFloat(elStyle.marginTop || \"0\"),\n          next: parseFloat(elStyle.marginBottom || \"0\")\n        };\n      this._height = horizontal ? el.offsetHeight : this._size;\n    }\n\n    this._pos = prevPanel\n      ? prevPanel.range.max + prevPanel.margin.next + this._margin.prev\n      : this._margin.prev;\n\n    this._updateAlignPos();\n\n    return this;\n  }\n\n  /**\n   * Change panel's size. This will change the actual size of the panel element by changing its CSS width/height property\n   * @ko 패널 크기를 변경합니다. 패널 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New panel size<ko>새 패널 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @chainable\n   * @return {this}\n   */\n  public setSize({\n    width,\n    height\n  }: Partial<{\n    width: number | string;\n    height: number | string;\n  }>): this {\n    const el = this.element;\n\n    if (width != null) {\n      if (isString(width)) {\n        el.style.width = width;\n      } else {\n        el.style.width = `${width}px`;\n      }\n    }\n    if (height != null) {\n      if (isString(height)) {\n        el.style.height = height;\n      } else {\n        el.style.height = `${height}px`;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Check whether the given element is inside of this panel's {@link Panel#element element}\n   * @ko 해당 엘리먼트가 이 패널의 {@link Panel#element element} 내에 포함되어 있는지를 반환합니다\n   * @param {HTMLElement} element The HTMLElement to check<ko>확인하고자 하는 HTMLElement</ko>\n   * @return {boolean} A Boolean value indicating the element is inside of this panel {@link Panel#element element}<ko>패널의 {@link Panel#element element}내에 해당 엘리먼트 포함 여부</ko>\n   */\n  public contains(element: HTMLElement): boolean {\n    return !!this.element?.contains(element);\n  }\n\n  /**\n   * Reset internal state and set {@link Panel#removed removed} to `true`\n   * @ko 내부 상태를 초기화하고 {@link Panel#removed removed}를 `true`로 설정합니다.\n   * @return {void}\n   */\n  public destroy(): void {\n    this._resetInternalStates();\n    this._removed = true;\n  }\n\n  /**\n   * Check whether the given position is inside of this panel's {@link Panel#range range}\n   * @ko 주어진 좌표가 현재 패널의 {@link Panel#range range}내에 속해있는지를 반환합니다.\n   * @param {number} pos A position to check<ko>확인하고자 하는 좌표</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @return {boolean} A Boolean value indicating whether the given position is included in the panel range<ko>해당 좌표가 패널 영역 내에 속해있는지 여부</ko>\n   */\n  public includePosition(pos: number, includeMargin: boolean = false): boolean {\n    return this.includeRange(pos, pos, includeMargin);\n  }\n\n  /**\n   * Check whether the given range is fully included in this panel's area\n   * @ko 주어진 범위가 이 패널 내부에 완전히 포함되는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @returns {boolean} A Boolean value indicating whether the given range is fully included in the panel range<ko>해당 범위가 패널 영역 내에 완전히 속해있는지 여부</ko>\n   */\n  public includeRange(min: number, max: number, includeMargin: boolean = false): boolean {\n    const margin = this._margin;\n    const panelRange = this.range;\n\n    if (includeMargin) {\n      panelRange.min -= margin.prev;\n      panelRange.max += margin.next;\n    }\n\n    return max >= panelRange.min && min <= panelRange.max;\n  }\n\n  /**\n   * Move {@link Camera} to this panel\n   * @ko {@link Camera}를 이 패널로 이동합니다\n   * @param {number} [duration] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @returns {Promise<void>} A Promise which will be resolved after reaching the panel<ko>패널 도달시에 resolve되는 Promise</ko>\n   */\n  public focus(duration?: number) {\n    return this._flicking.moveTo(this._index, duration);\n  }\n\n  /**\n   * Get previous(`index - 1`) panel. When the previous panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the last panel if called from the first panel\n   * @ko 이전(`index - 1`) 패널을 반환합니다. 이전 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 첫번째 패널에서 이 메소드를 호출할 경우 마지막 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>이전 패널</ko>\n   */\n  public prev(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === 0 ? panelCount - 1 : index - 1)\n      : renderer.getPanel(index - 1);\n  }\n\n  /**\n   * Get next(`index + 1`) panel. When the next panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the first panel if called from the last panel\n   * @ko 다음(`index + 1`) 패널을 반환합니다. 다음 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 마지막 패널에서 이 메소드를 호출할 경우 첫번째 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>다음 패널</ko>\n   */\n  public next(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === panelCount - 1 ? 0 : index + 1)\n      : renderer.getPanel(index + 1);\n  }\n\n  /**\n   * Increase panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increaseIndex(val: number): this {\n    this._index += Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Decrease panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreaseIndex(val: number): this {\n    this._index -= Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Increase panel's position by the given value\n   * @ko 패널의 위치를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increasePosition(val: number): this {\n    this._moveBy(Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * Decrease panel's position by the given value\n   * @ko 패널의위치를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreasePosition(val: number): this {\n    this._moveBy(-Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * @internal\n   * @return {boolean} toggled\n   */\n  public toggle(prevPos: number, newPos: number): boolean {\n    const toggleDirection = this._toggleDirection;\n    const togglePosition = this._togglePosition;\n\n    if (toggleDirection === DIRECTION.NONE || newPos === prevPos) return false;\n\n    const prevToggled = this._toggled;\n\n    if (newPos > prevPos) {\n      if (togglePosition >= prevPos && togglePosition <= newPos) {\n        this._toggled = toggleDirection === DIRECTION.NEXT;\n      }\n    } else {\n      if (togglePosition <= prevPos && togglePosition >= newPos) {\n        this._toggled = toggleDirection !== DIRECTION.NEXT;\n      }\n    }\n\n    return prevToggled !== this._toggled;\n  }\n\n  /**\n   * @internal\n   */\n  public updateCircularToggleDirection(): this {\n    const flicking = this._flicking;\n\n    if (!flicking.circularEnabled) {\n      this._toggleDirection = DIRECTION.NONE;\n      this._toggled = false;\n      return this;\n    }\n\n    const camera = flicking.camera;\n    const camRange = camera.range;\n    const camAlignPosition = camera.alignPosition;\n    const camVisibleRange = camera.visibleRange;\n    const camVisibleSize = camVisibleRange.max - camVisibleRange.min;\n\n    const minimumVisible = camRange.min - camAlignPosition;\n    const maximumVisible = camRange.max - camAlignPosition + camVisibleSize;\n\n    const shouldBeVisibleAtMin = this.includeRange(maximumVisible - camVisibleSize, maximumVisible, false);\n    const shouldBeVisibleAtMax = this.includeRange(minimumVisible, minimumVisible + camVisibleSize, false);\n\n    this._toggled = false;\n    if (shouldBeVisibleAtMin) {\n      this._toggleDirection = DIRECTION.PREV;\n      this._togglePosition = this.range.max + camRange.min - camRange.max + camAlignPosition;\n      this.toggle(Infinity, camera.position);\n    } else if (shouldBeVisibleAtMax) {\n      this._toggleDirection = DIRECTION.NEXT;\n      this._togglePosition = this.range.min + camRange.max - camVisibleSize + camAlignPosition;\n      this.toggle(-Infinity, camera.position);\n    } else {\n      this._toggleDirection = DIRECTION.NONE;\n      this._togglePosition = 0;\n    }\n\n    return this;\n  }\n\n  private _moveBy(val: number): this {\n    this._pos += val;\n\n    return this;\n  }\n\n  private _updateAlignPos() {\n    this._alignPos = parseAlign(this._align, this._size);\n  }\n\n  private _resetInternalStates() {\n    this._size = 0;\n    this._pos = 0;\n    this._margin = { prev: 0, next: 0 };\n    this._height = 0;\n    this._alignPos = 0;\n    this._toggled = false;\n    this._togglePosition = 0;\n    this._toggleDirection = DIRECTION.NONE;\n  }\n}\n\nexport default Panel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ElementPanelOptions extends PanelOptions {\n  el: HTMLElement;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass ElementPanel extends Panel {\n  private _el: HTMLElement;\n  private _rendered: boolean;\n\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  public get rendered() { return this._rendered; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ElementPanelOptions) {\n    super(options);\n\n    this._el = options.el;\n    this._rendered = true;\n  }\n\n  public markForShow() {\n    this._rendered = true;\n  }\n\n  public markForHide() {\n    this._rendered = false;\n  }\n}\n\nexport default ElementPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached, toArray } from \"../utils\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport ElementPanel from \"../core/panel/ElementPanel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nclass VanillaRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async render() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n    const wasRenderedPanels = this._panels.filter(panel => panel.element.parentElement === cameraEl);\n\n    this._updateRenderingPanels();\n    const renderingPanels = this._getRenderingPanelsByOrder();\n\n    this._removePanelElements(wasRenderedPanels.filter(panel => !panel.rendered));\n    this._insertPanelElements(renderingPanels.filter(panel => panel.element.parentElement !== cameraEl), null);\n    this._resetPanelElementOrder(renderingPanels);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async forceRenderAllPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const fragment = document.createDocumentFragment();\n\n    this._panels.forEach(panel => fragment.appendChild(panel.element));\n\n    this._removeAllChildsFromCamera();\n\n    cameraElement.appendChild(fragment);\n  }\n\n  protected _collectPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const cameraElement = flicking.camera.element;\n\n    // Remove all text nodes in the camera element\n    toArray(cameraElement.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        cameraElement.removeChild(node);\n      }\n    });\n\n    const align = this._getPanelAlign();\n    const cameraChilds = toArray(cameraElement.children);\n\n    this._panels = cameraChilds.map(\n      (el: HTMLElement, index: number) => new ElementPanel({ flicking, el, index, align })\n    );\n  }\n\n  protected _createPanel(el: HTMLElement, options: PanelOptions): ElementPanel {\n    return new ElementPanel({ el, ...options });\n  }\n\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const nextSiblingElement = nextSibling?.element || null;\n    const fragment = document.createDocumentFragment();\n\n    panels.forEach(panel => fragment.appendChild(panel.element));\n    cameraElement.insertBefore(fragment, nextSiblingElement);\n\n    return this;\n  }\n\n  protected _removePanelElements(panels: Panel[]): this {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    panels.forEach(panel => {\n      cameraElement.removeChild(panel.element);\n    });\n\n    return this;\n  }\n\n  private _resetPanelElementOrder(panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n\n    // We're using reversed panels here as last panel should be the last element of camera element\n    const reversedPanels = [...panels].reverse();\n    reversedPanels.forEach((panel, idx) => {\n      const nextPanel = reversedPanels[idx - 1];\n      const nextPanelEl = nextPanel ? nextPanel.element : null;\n\n      if (panel.element.nextElementSibling !== nextPanelEl) {\n        cameraEl.insertBefore(panel.element, nextPanelEl);\n      }\n    });\n  }\n\n  private _removeAllChildsFromCamera() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    // Remove other elements\n    while (cameraElement.firstChild) {\n      cameraElement.removeChild(cameraElement.firstChild);\n    }\n  }\n\n  private _getRenderingPanelsByOrder(): Panel[] {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const panels = flicking.renderer.panels;\n\n    return panels.filter(panel => panel.rendered)\n      .sort((a, b) => (a.position + a.offset) - (b.position + b.offset));\n  }\n}\n\nexport default VanillaRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nabstract class ExternalRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void {\n    // DO NOTHING\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _removePanelElements(panels: Panel[]): void {\n    // DO NOTHING\n  }\n}\n\nexport default ExternalRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nimport FlickingError from \"./core/FlickingError\";\nimport Viewport from \"./core/Viewport\";\nimport { Panel } from \"./core/panel\";\nimport { Control, SnapControl, SnapControlOptions, FreeControl, StrictControl, FreeControlOptions, StrictControlOptions } from \"./control\";\nimport { BoundCamera, Camera, CircularCamera, LinearCamera } from \"./camera\";\nimport { Renderer, VanillaRenderer, ExternalRenderer } from \"./renderer\";\nimport { EVENTS, ALIGN, MOVE_TYPE, DIRECTION } from \"./const/external\";\nimport * as ERROR from \"./const/error\";\nimport { findIndex, getElement, includes, parseElement } from \"./utils\";\nimport { HoldStartEvent, HoldEndEvent, MoveStartEvent, SelectEvent, MoveEvent, MoveEndEvent, WillChangeEvent, WillRestoreEvent, NeedPanelEvent, VisibleChangeEvent, ReachEdgeEvent, ReadyEvent, AfterResizeEvent, BeforeResizeEvent, ChangedEvent, RestoredEvent, PanelChangeEvent } from \"./type/event\";\nimport { LiteralUnion, ValueOf } from \"./type/internal\";\nimport { ElementLike, Plugin, Status, MoveTypeOptions } from \"./type/external\";\n\n/**\n * @interface\n */\nexport interface FlickingEvents {\n  [EVENTS.READY]: ReadyEvent;\n  [EVENTS.BEFORE_RESIZE]: BeforeResizeEvent;\n  [EVENTS.AFTER_RESIZE]: AfterResizeEvent;\n  [EVENTS.HOLD_START]: HoldStartEvent;\n  [EVENTS.HOLD_END]: HoldEndEvent;\n  [EVENTS.MOVE_START]: MoveStartEvent;\n  [EVENTS.MOVE]: MoveEvent;\n  [EVENTS.MOVE_END]: MoveEndEvent;\n  [EVENTS.WILL_CHANGE]: WillChangeEvent;\n  [EVENTS.CHANGED]: ChangedEvent;\n  [EVENTS.WILL_RESTORE]: WillRestoreEvent;\n  [EVENTS.RESTORED]: RestoredEvent;\n  [EVENTS.SELECT]: SelectEvent;\n  [EVENTS.NEED_PANEL]: NeedPanelEvent;\n  [EVENTS.VISIBLE_CHANGE]: VisibleChangeEvent;\n  [EVENTS.REACH_EDGE]: ReachEdgeEvent;\n  [EVENTS.PANEL_CHANGE]: PanelChangeEvent;\n}\n\n/**\n * @interface\n */\nexport interface FlickingOptions {\n  // UI / LAYOUT\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number | { panel: number | string; camera: number | string };\n  defaultIndex: number;\n  horizontal: boolean;\n  circular: boolean;\n  bound: boolean;\n  adaptive: boolean;\n  panelsPerView: number;\n  noPanelStyleOverride: boolean;\n  // EVENT\n  needPanelThreshold: number;\n  preventEventsBeforeInit: boolean;\n  // ANIMATION\n  deceleration: number;\n  duration: number;\n  easing: (x: number) => number;\n  // INPUT\n  inputType: string[];\n  moveType: ValueOf<typeof MOVE_TYPE> | MoveTypeOptions<ValueOf<typeof MOVE_TYPE>>;\n  threshold: number;\n  interruptable: boolean;\n  bounce: number | string | [number | string, number | string];\n  iOSEdgeSwipeThreshold: number;\n  preventClickOnDrag: boolean;\n  disableOnInit: boolean;\n  // PERFORMANCE\n  renderOnlyVisible: boolean;\n  // OTHERS\n  autoInit: boolean;\n  autoResize: boolean;\n  renderExternal: {\n    renderer: typeof ExternalRenderer;\n    rendererOptions: {[key: string]: any};\n  } | null;\n}\n\n/**\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|@egjs/component}\n * @requires {@link https://github.com/naver/egjs-axes|@egjs/axes}\n */\nclass Flicking extends Component<FlickingEvents> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @type {string}\n   * @readonly\n   * @example\n   * ```ts\n   * Flicking.VERSION;  // ex) 4.0.0\n   * ```\n   */\n  public static VERSION = \"#__VERSION__#\";\n\n  // Core components\n  private _viewport: Viewport;\n  private _camera: Camera;\n  private _control: Control;\n  private _renderer: Renderer;\n\n  // Options\n  private _align: FlickingOptions[\"align\"];\n  private _defaultIndex: FlickingOptions[\"defaultIndex\"];\n  private _horizontal: FlickingOptions[\"horizontal\"];\n  private _circular: FlickingOptions[\"circular\"];\n  private _bound: FlickingOptions[\"bound\"];\n  private _adaptive: FlickingOptions[\"adaptive\"];\n  private _panelsPerView: FlickingOptions[\"panelsPerView\"];\n  private _noPanelStyleOverride: FlickingOptions[\"noPanelStyleOverride\"];\n\n  private _needPanelThreshold: FlickingOptions[\"needPanelThreshold\"];\n  private _preventEventsBeforeInit: FlickingOptions[\"preventEventsBeforeInit\"];\n\n  private _deceleration: FlickingOptions[\"deceleration\"];\n  private _duration: FlickingOptions[\"duration\"];\n  private _easing: FlickingOptions[\"easing\"];\n\n  private _inputType: FlickingOptions[\"inputType\"];\n  private _moveType: FlickingOptions[\"moveType\"];\n  private _threshold: FlickingOptions[\"threshold\"];\n  private _interruptable: FlickingOptions[\"interruptable\"];\n  private _bounce: FlickingOptions[\"bounce\"];\n  private _iOSEdgeSwipeThreshold: FlickingOptions[\"iOSEdgeSwipeThreshold\"];\n  private _preventClickOnDrag: FlickingOptions[\"preventClickOnDrag\"];\n  private _disableOnInit: FlickingOptions[\"disableOnInit\"];\n\n  private _renderOnlyVisible: FlickingOptions[\"renderOnlyVisible\"];\n\n  private _autoResize: FlickingOptions[\"autoResize\"];\n  private _autoInit: FlickingOptions[\"autoInit\"];\n  private _renderExternal: FlickingOptions[\"renderExternal\"];\n\n  // Internal State\n  private _initialized: boolean;\n  private _plugins: Plugin[];\n\n  // Components\n  /**\n   * {@link Control} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Control} 인스턴스\n   * @type {Control}\n   * @default SnapControl\n   * @readonly\n   * @see Control\n   * @see SnapControl\n   * @see FreeControl\n   */\n  public get control() { return this._control; }\n  /**\n   * {@link Camera} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Camera} 인스턴스\n   * @type {Camera}\n   * @default LinearCamera\n   * @readonly\n   * @see Camera\n   * @see LinearCamera\n   * @see BoundCamera\n   * @see CircularCamera\n   */\n  public get camera() { return this._camera; }\n  /**\n   * {@link Renderer} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Renderer} 인스턴스\n   * @type {Renderer}\n   * @default VanillaRenderer\n   * @readonly\n   * @see Renderer\n   * @see VanillaRenderer\n   * @see ExternalRenderer\n   */\n  public get renderer() { return this._renderer; }\n  /**\n   * A component that manages viewport size\n   * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n   * @type {Viewport}\n   * @readonly\n   * @see Viewport\n   */\n  public get viewport() { return this._viewport; }\n  // Internal States\n  /**\n   * Whether Flicking's {@link Flicking#init init()} is called.\n   * This is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.\n   * @ko Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n   * 이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get initialized() { return this._initialized; }\n  /**\n   * Whether the `circular` option is enabled.\n   * The {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.\n   * @ko {@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get circularEnabled() { return this._camera.controlParams.circular; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get index() { return this._control.activeIndex; }\n  /**\n   * The root(`.flicking-viewport`) element\n   * @ko root(`.flicking-viewport`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._viewport.element; }\n  /**\n   * Currently active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel}\n   * @readonly\n   * @see Panel\n   */\n  public get currentPanel() { return this._control.activePanel; }\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._renderer.panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._renderer.panelCount; }\n  /**\n   * Array of panels that is visible at the current position\n   * @ko 현재 보이는 패널의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get visiblePanels() { return this._camera.visiblePanels; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._control.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._control.holding; }\n  /**\n   * A current list of activated plugins\n   * @ko 현재 활성화된 플러그인 목록\n   * @type {Plugin[]}\n   * @readonly\n   */\n  public get activePlugins() { return this._plugins; }\n\n  // Options Getter\n  // UI / LAYOUT\n  /**\n   * Align position of the panels within viewport. You can set different values each for the panel and camera\n   * @ko 뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다\n   * @type {ALIGN | string | number | { panel: string | number, camera: string | number }}\n   * @property {ALIGN | string | number} panel The align value for each {@link Panel}s<ko>개개의 {@link Panel}에 적용할 값</ko>\n   * @property {ALIGN | string | number} camera The align value for {@link Camera}<ko>{@link Camera}에 적용할 값</ko>\n   * @default \"center\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // Literal strings\n   *   \"prev\", \"center\", \"next\",\n   *   // % values, applied to both panel & camera\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000,\n   *   // Setting a different value for panel & camera\n   *   { panel: \"10%\", camera: \"25%\" }\n   * ];\n   *\n   * possibleOptions.forEach(align => {\n   *   new Flicking(\"#el\", { align });\n   * });\n   * ```\n   */\n  public get align() { return this._align; }\n  /**\n   * Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer\n   * @ko Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다\n   * @type {number}\n   * @default 0\n   */\n  public get defaultIndex() { return this._defaultIndex; }\n  /**\n   * Direction of panel movement (true: horizontal, false: vertical)\n   * @ko 패널 이동 방향 (true: 가로방향, false: 세로방향)\n   * @type {boolean}\n   * @default true\n   */\n  public get horizontal() { return this._horizontal; }\n  /**\n   * Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.\n   * @ko 순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get circular() { return this._circular; }\n  /**\n   * Prevent the view(camera element) from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n   * Only can be enabled when `circular=false`\n   * @ko 뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가지 못하게 하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 옵션입니다\n   * `circular=false`인 경우에만 사용할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get bound() { return this._bound; }\n  /**\n   * Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`\n   * @ko 이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get adaptive() { return this._adaptive; }\n  /**\n   * A visible number of panels on viewport. Enabling this option will automatically resize panel size\n   * @ko 한 화면에 보이는 패널의 개수. 이 옵션을 활성화할 경우 패널의 크기를 강제로 재조정합니다\n   * @type {number}\n   * @default -1\n   */\n  public get panelsPerView() { return this._panelsPerView; }\n  /**\n   * Enabling this option will not change `width/height` style of the panels if {@link Flicking#panelsPerView} is enabled.\n   * This behavior can be useful in terms of performance when you're manually managing all panel sizes\n   * @ko 이 옵션을 활성화할 경우, {@link Flicking#panelsPerView} 옵션이 활성화되었을 때 패널의 `width/height` 스타일을 변경하지 않도록 설정합니다.\n   * 모든 패널들의 크기를 직접 관리하고 있을 경우, 이 옵션을 활성화하면 성능면에서 유리할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get noPanelStyleOverride() { return this._noPanelStyleOverride; }\n  // EVENTS\n  /**\n   * A Threshold from viewport edge before triggering `needPanel` event\n   * @ko `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리\n   * @type {number}\n   * @default 0\n   */\n  public get needPanelThreshold() { return this._needPanelThreshold; }\n  /**\n   * When enabled, events are not triggered before `ready` when initializing\n   * @ko 활성화할 경우 초기화시 `ready` 이벤트 이전의 이벤트가 발생하지 않습니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get preventEventsBeforeInit() { return this._preventEventsBeforeInit; }\n  // ANIMATION\n  /**\n   * Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time\n   * @ko 사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다\n   * @type {number}\n   * @default 0.0075\n   */\n  public get deceleration() { return this._deceleration; }\n  /**\n   * An easing function applied to the panel movement animation. Default value is `easeOutCubic`\n   * @ko 패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다\n   * @type {function}\n   * @default x => 1 - Math.pow(1 - x, 3)\n   * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n   */\n  public get easing() { return this._easing; }\n  /**\n   * Default duration of the animation (ms)\n   * @ko 디폴트 애니메이션 재생 시간 (ms)\n   * @type {number}\n   * @default 500\n   */\n  public get duration() { return this._duration; }\n  // INPUT\n  /**\n   * Types of input devices to enable\n   * @ko 활성화할 입력 장치 종류\n   * @type {string[]}\n   * @default [\"touch\", \"mouse\"]\n   * @see {@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Possible values (PanInputOption#inputType)}\n   * <ko>{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 가능한 값들 (PanInputOption#inputType)}</ko>\n   */\n  public get inputType() { return this._inputType; }\n  /**\n   * Movement style by user input. This will change instance type of {@link Flicking#control}\n   * You can use the values of the constant {@link MOVE_TYPE}\n   * @ko 사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다\n   * 상수 {@link MOVE_TYPE}에 정의된 값들을 이용할 수 있습니다\n   * @type {MOVE_TYPE | Pair<string, object>}\n   * @default \"snap\"\n   * @example\n   * |moveType|control|options|\n   * |:---:|:---:|:---:|\n   * |\"snap\"|{@link SnapControl}||\n   * |\"freeScroll\"|{@link FreeControl}|{@link FreeControlOptions}|\n   *\n   * ```ts\n   * import Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking({\n   *   moveType: MOVE_TYPE.SNAP\n   * });\n   * ```\n   *\n   * ```ts\n   * const flicking = new Flicking({\n   *   // If you want more specific settings for the moveType\n   *   // [moveType, options for that moveType]\n   *   // In this case, it's [\"freeScroll\", FreeControlOptions]\n   *   moveType: [MOVE_TYPE.FREE_SCROLL, { stopAtEdge: true }]\n   * });\n   * ```\n   */\n  public get moveType() { return this._moveType; }\n  /**\n   * Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.\n   * @ko 패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.\n   * @type {number}\n   * @default 40\n   */\n  public get threshold() { return this._threshold; }\n  /**\n   * Set animation to be interruptable by click/touch.\n   * @ko 사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get interruptable() { return this._interruptable; }\n  /**\n   * The size value of the bounce area. Only can be enabled when `circular=false`.\n   * You can set different bounce value for prev/next direction by using array.\n   * `number` for px value, and `string` for px, and % value relative to viewport size.\n   * You have to call {@link Control#updateInput} after changing this to take effect.\n   * @ko Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n   * 배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n   * `number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n   * 이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.\n   * @type {string | number | Array<string | number>}\n   * @default \"20%\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // % values, relative to viewport element(\".flicking-viewport\")'s size\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000\n   * ];\n   * ```\n   *\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n   *\n   * flicking.bounce = \"100%\";\n   * flicking.control.updateInput(); // Call this to update!\n   * ```\n   */\n  public get bounce() { return this._bounce; }\n  /**\n   * Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward\n   * @ko iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)\n   * @type {number}\n   * @default 30\n   */\n  public get iOSEdgeSwipeThreshold() { return this._iOSEdgeSwipeThreshold; }\n  /**\n   * Automatically prevent `click` event if the user has dragged at least a single pixel on the viewport element\n   * @ko 사용자가 뷰포트 영역을 1픽셀이라도 드래그했을 경우 자동으로 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트를 취소합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get preventClickOnDrag() { return this._preventClickOnDrag; }\n  /**\n   * Automatically call {@link Flicking#disableInput disableInput()} on initialization\n   * @ko Flicking init시에 {@link Flicking#disableInput disableInput()}을 바로 호출합니다\n   * @type {boolean}\n   * @default false\n   */\n  public get disableOnInit() { return this._disableOnInit; }\n  // PERFORMANCE\n  /**\n   * Whether to render visible panels only. This can dramatically increase performance when there're many panels.\n   * @ko 보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get renderOnlyVisible() { return this._renderOnlyVisible; }\n  // OTHERS\n  /**\n   * Call {@link Flicking#init init()} automatically when creating Flicking's instance\n   * @ko Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다\n   * @type {boolean}\n   * @default true\n   * @readonly\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * Attach Flicking's {@link Flicking#resize resize} method to window's resize event.\n   * Flicking will automatically call {@link Flicking#resize resize} window size and orientation change.\n   * @ko Flicking의 {@link Flicking#resize resize} 메소드를 window의 resize 이벤트 핸들러로 등록합니다.\n   * 설정시 window 창 크기 및 orientation 변경에 의해 자동으로 {@link Flicking#resize resize}를 호출합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get autoResize() { return this._autoResize; }\n  /**\n   * This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.\n   * @ko 프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!\n   * @type {boolean}\n   * @default false\n   * @internal\n   * @readonly\n   */\n  public get renderExternal() { return this._renderExternal; }\n\n  // Options Setter\n  // UI / LAYOUT\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n    this._renderer.align = val;\n    this._camera.align = val;\n  }\n\n  public set defaultIndex(val: FlickingOptions[\"defaultIndex\"]) { this._defaultIndex = val; }\n  public set horizontal(val: FlickingOptions[\"horizontal\"]) { this._horizontal = val; }\n  public set circular(val: FlickingOptions[\"circular\"]) { this._circular = val; }\n  public set bound(val: FlickingOptions[\"bound\"]) { this._bound = val; }\n  public set adaptive(val: FlickingOptions[\"adaptive\"]) { this._adaptive = val; }\n  public set panelsPerView(val: FlickingOptions[\"panelsPerView\"]) { this._panelsPerView = val; }\n  public set noPanelStyleOverride(val: FlickingOptions[\"noPanelStyleOverride\"]) { this._noPanelStyleOverride = val; }\n  // EVENTS\n  public set needPanelThreshold(val: FlickingOptions[\"needPanelThreshold\"]) { this._needPanelThreshold = val; }\n  public set preventEventsBeforeInit(val: FlickingOptions[\"preventEventsBeforeInit\"]) { this._preventEventsBeforeInit = val; }\n  // ANIMATION\n  public set deceleration(val: FlickingOptions[\"deceleration\"]) { this._deceleration = val; }\n  public set easing(val: FlickingOptions[\"easing\"]) { this._easing = val; }\n  public set duration(val: FlickingOptions[\"duration\"]) { this._duration = val; }\n  // INPUT\n  public set inputType(val: FlickingOptions[\"inputType\"]) { this._inputType = val; }\n  public set moveType(val: FlickingOptions[\"moveType\"]) { this._moveType = val; }\n  public set threshold(val: FlickingOptions[\"threshold\"]) { this._threshold = val; }\n  public set interruptable(val: FlickingOptions[\"interruptable\"]) { this._interruptable = val; }\n  public set bounce(val: FlickingOptions[\"bounce\"]) { this._bounce = val; }\n  public set iOSEdgeSwipeThreshold(val: FlickingOptions[\"iOSEdgeSwipeThreshold\"]) { this._iOSEdgeSwipeThreshold = val; }\n  public set preventClickOnDrag(val: FlickingOptions[\"preventClickOnDrag\"]) {\n    const prevVal = this._preventClickOnDrag;\n\n    if (val === prevVal) return;\n\n    const controller = this._control.controller;\n\n    if (val) {\n      controller.addPreventClickHandler();\n    } else {\n      controller.removePreventClickHandler();\n    }\n\n    this._preventClickOnDrag = val;\n  }\n\n  public set disableOnInit(val: FlickingOptions[\"disableOnInit\"]) { this._disableOnInit = val; }\n  // PERFORMANCE\n  public set renderOnlyVisible(val: FlickingOptions[\"renderOnlyVisible\"]) { this._renderOnlyVisible = val; }\n  // OTHERS\n  public set autoResize(val: FlickingOptions[\"autoResize\"]) { this._autoResize = val; }\n\n  /**\n   * @param root A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n   * <ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>\n   * @param {object} [options={}] An options object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n   * <ko>\n   *\n   * |code|조건|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n   *\n   * </ko>\n   * @example\n   * ```ts\n   * import Flicking from \"@egjs/flicking\";\n   *\n   * // Creating new instance of Flicking with HTMLElement\n   * const flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n   *\n   * // Creating new instance of Flicking with CSS selector\n   * const flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n   * ```\n   */\n  public constructor(root: HTMLElement | string, {\n    align = ALIGN.CENTER,\n    defaultIndex = 0,\n    horizontal = true,\n    circular = false,\n    bound = false,\n    adaptive = false,\n    panelsPerView = -1,\n    noPanelStyleOverride = false,\n    needPanelThreshold = 0,\n    preventEventsBeforeInit = true,\n    deceleration = 0.0075,\n    duration = 500,\n    easing = x => 1 - Math.pow(1 - x, 3),\n    inputType = [\"mouse\", \"touch\"],\n    moveType = \"snap\",\n    threshold = 40,\n    interruptable = true,\n    bounce = \"20%\",\n    iOSEdgeSwipeThreshold = 30,\n    preventClickOnDrag = true,\n    disableOnInit = false,\n    renderOnlyVisible = false,\n    autoInit = true,\n    autoResize = true,\n    renderExternal = null\n  }: Partial<FlickingOptions> = {}) {\n    super();\n\n    // Internal states\n    this._initialized = false;\n    this._plugins = [];\n\n    // Bind options\n    this._align = align;\n    this._defaultIndex = defaultIndex;\n    this._horizontal = horizontal;\n    this._circular = circular;\n    this._bound = bound;\n    this._adaptive = adaptive;\n    this._panelsPerView = panelsPerView;\n    this._noPanelStyleOverride = noPanelStyleOverride;\n    this._needPanelThreshold = needPanelThreshold;\n    this._preventEventsBeforeInit = preventEventsBeforeInit;\n    this._deceleration = deceleration;\n    this._duration = duration;\n    this._easing = easing;\n    this._inputType = inputType;\n    this._moveType = moveType;\n    this._threshold = threshold;\n    this._interruptable = interruptable;\n    this._bounce = bounce;\n    this._iOSEdgeSwipeThreshold = iOSEdgeSwipeThreshold;\n    this._preventClickOnDrag = preventClickOnDrag;\n    this._disableOnInit = disableOnInit;\n    this._renderOnlyVisible = renderOnlyVisible;\n    this._autoResize = autoResize;\n    this._autoInit = autoInit;\n    this._renderExternal = renderExternal;\n\n    // Create core components\n    this._viewport = new Viewport(getElement(root));\n    this._renderer = this._createRenderer();\n    this._camera = this._createCamera();\n    this._control = this._createControl();\n\n    this.resize = this.resize.bind(this);\n\n    if (this._autoInit) {\n      void this.init();\n    }\n  }\n\n  /**\n   * Initialize Flicking and move to the default index\n   * This is automatically called on Flicking's constructor when `autoInit` is true(default)\n   * @ko Flicking을 초기화하고, 디폴트 인덱스로 이동합니다\n   * 이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다\n   * @fires Flicking#ready\n   * @return {this}\n   */\n  public async init(): Promise<void> {\n    if (this._initialized) return;\n\n    const camera = this._camera;\n    const renderer = this._renderer;\n    const control = this._control;\n    const originalTrigger = this.trigger;\n    const preventEventsBeforeInit = this._preventEventsBeforeInit;\n\n    camera.init(this);\n    renderer.init(this);\n    control.init(this);\n\n    if (preventEventsBeforeInit) {\n      this.trigger = () => this;\n    }\n\n    await this.resize();\n\n    // Look at initial panel\n    await this._moveToInitialPanel();\n\n    if (this._autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n    if (this._preventClickOnDrag) {\n      control.controller.addPreventClickHandler();\n    }\n    if (this._disableOnInit) {\n      this.disableInput();\n    }\n\n    this._plugins.forEach(plugin => plugin.init(this));\n\n    // Done initializing & emit ready event\n    this._initialized = true;\n    if (preventEventsBeforeInit) {\n      this.trigger = originalTrigger;\n    }\n    this.trigger(new ComponentEvent(EVENTS.READY));\n\n    return;\n  }\n\n  /**\n   * Destroy Flicking and remove all event handlers\n   * @ko Flicking과 하위 컴포넌트들을 초기 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거합니다\n   * @return {void}\n   */\n  public destroy(): void {\n    if (!this._initialized) return;\n\n    this.off();\n    window.removeEventListener(\"resize\", this.resize);\n\n    this._control.destroy();\n    this._camera.destroy();\n    this._renderer.destroy();\n\n    this._plugins.forEach(plugin => plugin.destroy());\n\n    this._initialized = false;\n  }\n\n  /**\n   * Move to the previous panel (current index - 1)\n   * @ko 이전 패널로 이동합니다 (현재 인덱스 - 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public prev(duration: number = this._duration): Promise<void> {\n    return this.moveTo(this._control.activePanel?.prev()?.index ?? -1, duration, DIRECTION.PREV);\n  }\n\n  /**\n   * Move to the next panel (current index + 1)\n   * @ko 다음 패널로 이동합니다 (현재 인덱스 + 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public next(duration: number = this._duration) {\n    return this.moveTo(this._control.activePanel?.next()?.index ?? this._renderer.panelCount, duration, DIRECTION.NEXT);\n  }\n\n  /**\n   * Move to the panel with given index\n   * @ko 주어진 인덱스에 해당하는 패널로 이동합니다\n   * @param {number} index The index of the panel to move<ko>이동할 패널의 인덱스</ko>\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public moveTo(index: number, duration: number = this._duration, direction: ValueOf<typeof DIRECTION> = DIRECTION.NONE) {\n    const renderer = this._renderer;\n    const panelCount = renderer.panelCount;\n\n    const panel = renderer.getPanel(index);\n\n    if (!panel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.INDEX_OUT_OF_RANGE(index, 0, panelCount - 1), ERROR.CODE.INDEX_OUT_OF_RANGE));\n    }\n\n    if (this._control.animating) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.ANIMATION_ALREADY_PLAYING, ERROR.CODE.ANIMATION_ALREADY_PLAYING));\n    }\n\n    return this._control.moveToPanel(panel, {\n      duration,\n      direction\n    });\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   * @example\n   * ```ts\n   * const panel = flicking.getPanel(0);\n   * // Which is a shorthand to...\n   * const samePanel = flicking.panels[0];\n   * ```\n   */\n  public getPanel(index: number): Panel | null {\n    return this._renderer.getPanel(index);\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @return {this}\n   */\n  public enableInput(): this {\n    this._control.enable();\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @return {this}\n   */\n  public disableInput(): this {\n    this._control.disable();\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to {@link Flicking#setStatus setStatus()}\n   * @ko 현재 상태를 반환합니다. 반환받은 값을 {@link Flicking#setStatus setStatus()} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다\n   * @param {object} options Status retrieving options<ko>Status 반환 옵션</ko>\n   * @param {boolean} [options.index=true] Include current panel index to the returning status. Camera will automatically move to the given index when the {@link Flicking#setStatus setStatus} is called<ko>현재 패널 인덱스를 반환값에 포함시킵니다. {@link Flicking#setStatus setStatus} 호출시 자동으로 해당 인덱스로 카메라를 움직입니다</ko>\n   * @param {boolean} [options.position=true] Include camera position to the returning status. This works only when the {@link Flicking#moveType moveType} is `freeScroll`<ko>카메라의 현재 위치를 반환값에 포함시킵니다. 이 옵션은 {@link Flicking#moveType moveType}이 `freeScroll`일 경우에만 동작합니다</ko>\n   * @param {boolean} [options.includePanelHTML=false] Include panel's `outerHTML` to the returning status<ko>패널의 `outerHTML`을 반환값에 포함시킵니다</ko>\n   * @param {boolean} [options.visiblePanelsOnly=false] Include only {@link Flicking#visiblePanel visiblePanel}'s HTML. This option is available only when the `includePanelHTML` is true\n   * <ko>현재 보이는 패널({@link Flicking#visiblePanel visiblePanel})의 HTML만 반환합니다. `includePanelHTML`이 `true`일 경우에만 동작합니다.</ko>\n   * @return {Partial<Status>} An object with current status value information<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus({\n    index = true,\n    position = true,\n    includePanelHTML = false,\n    visiblePanelsOnly = false\n  }: Partial<{\n    index: boolean;\n    position: boolean;\n    includePanelHTML: boolean;\n    visiblePanelsOnly: boolean;\n  }> = {}): Status {\n    const camera = this._camera;\n    const panels = visiblePanelsOnly ? this.visiblePanels : this.panels;\n\n    const status: Status = {\n      panels: panels.map(panel => {\n        const panelInfo: Status[\"panels\"][0] = { index: panel.index };\n\n        if (includePanelHTML) {\n          panelInfo.html = panel.element.outerHTML;\n        }\n\n        return panelInfo;\n      })\n    };\n\n    if (index) {\n      status.index = this.index;\n    }\n    if (position) {\n      const nearestAnchor = camera.findNearestAnchor(camera.position);\n\n      if (nearestAnchor) {\n        status.position = {\n          panel: nearestAnchor.panel.index,\n          progressInPanel: camera.getProgressInPanel(nearestAnchor.panel)\n        };\n      }\n\n    }\n\n    if (visiblePanelsOnly) {\n      const visiblePanels = this.visiblePanels;\n\n      status.visibleOffset = visiblePanels[0]?.index ?? 0;\n    }\n\n    return status;\n  }\n\n  /**\n   * Restore to the state of the given {@link Status}\n   * @ko 주어진 {@link Status}의 상태로 복원합니다\n   * @param {Partial<Status>} status Status value to be restored. You should use the return value of the {@link Flicking#getStatus getStatus()} method<ko>복원할 상태 값. {@link Flicking#getStatus getStatus()} 메서드의 반환값을 지정하면 됩니다</ko>\n   * @return {void}\n   */\n  public setStatus(status: Status): void {\n    if (!this._initialized) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_INITIALIZED, ERROR.CODE.NOT_INITIALIZED);\n    }\n\n    const {\n      index,\n      position,\n      visibleOffset,\n      panels\n    } = status;\n\n    const renderer = this._renderer;\n    const control = this._control;\n\n    // Can't add/remove panels on external rendering\n    if (panels[0]?.html && !this._renderExternal) {\n      renderer.batchRemove({ index: 0, deleteCount: this.panels.length });\n      renderer.batchInsert({ index: 0, elements: parseElement(panels.map(panel => panel.html!)) });\n    }\n\n    if (index) {\n      const panelIndex = visibleOffset\n        ? index - visibleOffset\n        : index;\n\n      void this.moveTo(panelIndex, 0).catch(() => void 0);\n    }\n\n    if (position && this._moveType === MOVE_TYPE.FREE_SCROLL) {\n      const { panel, progressInPanel } = position;\n      const panelIndex = visibleOffset\n        ? panel - visibleOffset\n        : panel;\n      const panelRange = renderer.panels[panelIndex].range;\n      const newCameraPos = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      void control.moveToPosition(newCameraPos, 0).catch(() => void 0);\n    }\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다\n   * @param {...Plugin} plugins The plugin(s) to add<ko>추가할 플러그인(들)</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public addPlugins(...plugins: Plugin[]) {\n    if (this._initialized) {\n      plugins.forEach(item => item.init(this));\n    }\n\n    this._plugins.push(...plugins);\n\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거합니다.\n   * @param {...Plugin} plugin The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public removePlugins(...plugins: Plugin[]) {\n    plugins.forEach(item => {\n      const foundIndex = findIndex(this._plugins, val => val === item);\n\n      if (foundIndex >= 0) {\n        item.destroy();\n        this._plugins.splice(foundIndex, 1);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Update viewport/panel sizes\n   * @ko 패널 및 뷰포트의 크기를 갱신합니다\n   * @method\n   * @fires Flicking#beforeResize\n   * @fires Flicking#afterResize\n   * @return {this}\n   */\n  public async resize(): Promise<void> {\n    const viewport = this._viewport;\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    const activePanel = control.activePanel;\n    const prevWidth = viewport.width;\n    const prevHeight = viewport.height;\n    const prevProgressInPanel = activePanel\n      ? camera.getProgressInPanel(activePanel)\n      : 0;\n\n    this.trigger(new ComponentEvent(EVENTS.BEFORE_RESIZE, {\n      width: prevWidth,\n      height: prevHeight,\n      element: viewport.element\n    }));\n\n    viewport.resize();\n    await renderer.forceRenderAllPanels(); // Render all panel elements, to update sizes\n    renderer.updatePanelSize();\n    camera.updateAlignPos();\n    camera.updateRange();\n    camera.updateAnchors();\n    await renderer.render();\n\n    if (control.animating) {\n      // TODO:\n    } else {\n      await control.updatePosition(prevProgressInPanel);\n      control.updateInput();\n    }\n\n    const newWidth = viewport.width;\n    const newHeight = viewport.height;\n    const sizeChanged = newWidth !== prevWidth || newHeight !== prevHeight;\n\n    this.trigger(new ComponentEvent(EVENTS.AFTER_RESIZE, {\n      width: viewport.width,\n      height: viewport.height,\n      prev: {\n        width: prevWidth,\n        height: prevHeight\n      },\n      sizeChanged,\n      element: viewport.element\n    }));\n  }\n\n  /**\n   * Add new panels after the last panel\n   * @ko 패널 목록의 제일 끝에 새로운 패널들을 추가합니다\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of appended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#flick\");\n   * // These are possible parameters\n   * flicking.append(document.createElement(\"div\"));\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public append(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(this._renderer.panelCount, element);\n  }\n\n  /**\n   * Add new panels before the first panel\n   * This will increase index of panels after by the number of panels added\n   * @ko 패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다\n   * 추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.prepend(document.createElement(\"div\"));\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public prepend(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(0, element);\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.insert(0, document.createElement(\"div\"));\n   * flicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\n   * flicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public insert(index: number, element: ElementLike | ElementLike[]): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchInsert({ index, elements: parseElement(element) });\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return {Panel[]} An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchRemove({ index, deleteCount });\n  }\n\n  private _createControl(): Control {\n    const moveType = this._moveType;\n    const moveTypes = Object.keys(MOVE_TYPE).map(key => MOVE_TYPE[key] as ValueOf<typeof MOVE_TYPE>);\n\n    const moveTypeStr = Array.isArray(moveType)\n      ? moveType[0]\n      : moveType;\n\n    const moveTypeOptions = Array.isArray(moveType)\n      ? moveType[1] ?? {}\n      : {};\n\n    if (!includes(moveTypes, moveTypeStr)) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"moveType\", JSON.stringify(moveType)), ERROR.CODE.WRONG_OPTION);\n    }\n\n    switch (moveTypeStr) {\n      case MOVE_TYPE.SNAP:\n        return new SnapControl(moveTypeOptions as SnapControlOptions);\n      case MOVE_TYPE.FREE_SCROLL:\n        return new FreeControl(moveTypeOptions as FreeControlOptions);\n      case MOVE_TYPE.STRICT:\n        return new StrictControl(moveTypeOptions as StrictControlOptions);\n    }\n  }\n\n  private _createCamera(): Camera {\n    const cameraOption = { align: this._align };\n\n    if (this._circular) {\n      if (this._bound) {\n        // eslint-disable-next-line no-console\n        console.warn(\"\\\"circular\\\" and \\\"bound\\\" option cannot be used together, ignoring bound.\");\n      }\n      return new CircularCamera(cameraOption);\n    } else if (this._bound) {\n      return new BoundCamera(cameraOption);\n    } else {\n      return new LinearCamera(cameraOption);\n    }\n  }\n\n  private _createRenderer(): Renderer {\n    const rendererOptions = {\n      align: this._align\n    };\n\n    const renderExternal = this._renderExternal;\n\n    return renderExternal\n      ? new (renderExternal.renderer as any)({ ...rendererOptions, ...renderExternal.rendererOptions })\n      : new VanillaRenderer(rendererOptions);\n  }\n\n  private async _moveToInitialPanel(): Promise<void> {\n    const renderer = this._renderer;\n    const control = this._control;\n    const initialPanel = renderer.getPanel(this._defaultIndex) || renderer.getPanel(0);\n\n    if (!initialPanel) return;\n\n    return control.moveToPanel(initialPanel, {\n      duration: 0\n    });\n  }\n}\n\nexport default Flicking;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ExternalPanelOptions<T> extends PanelOptions {\n  externalComponent: T;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nabstract class ExternalPanel<T = any> extends Panel {\n  protected _externalComponent: T;\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ExternalPanelOptions<T>) {\n    super(options);\n\n    this._externalComponent = options.externalComponent;\n  }\n}\n\nexport default ExternalPanel;\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\nimport Renderer from \"../renderer/Renderer\";\n\nexport default (flicking: Flicking, diffResult: DiffResult<any>, rendered: any[]) => {\n  const renderer = flicking.renderer;\n\n  if (diffResult.removed.length > 0) {\n    let endIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.removed.forEach(removedIdx => {\n      if (endIdx < 0) {\n        endIdx = removedIdx;\n      }\n\n      if (prevIdx >= 0 && removedIdx !== prevIdx - 1) {\n        batchRemove(renderer, prevIdx, endIdx + 1);\n\n        endIdx = removedIdx;\n        prevIdx = removedIdx;\n      } else {\n        prevIdx = removedIdx;\n      }\n    });\n\n    batchRemove(renderer, prevIdx, endIdx + 1);\n  }\n\n  diffResult.ordered.forEach(([prevIdx, newIdx]) => {\n    const prevPanel = renderer.panels[prevIdx];\n    const indexDiff = newIdx - prevIdx;\n\n    if (indexDiff > 0) {\n      prevPanel.increaseIndex(indexDiff);\n    } else {\n      prevPanel.decreaseIndex(-indexDiff);\n    }\n    // Update position\n    prevPanel.resize();\n  });\n\n  if (diffResult.added.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.added.forEach((addedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && addedIdx !== prevIdx + 1) {\n        batchInsert(renderer, diffResult, rendered, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = addedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchInsert(renderer, diffResult, rendered, startIdx);\n    }\n  }\n};\n\nconst batchInsert = (renderer: Renderer, diffResult: DiffResult<any>, rendered: any[], startIdx: number, endIdx?: number) => {\n  renderer.batchInsert(\n    ...diffResult.added.slice(startIdx, endIdx).map((index, elIdx) => ({ index, elements: [rendered[elIdx + diffResult.prevList.length]] }))\n  );\n};\n\nconst batchRemove = (renderer: Renderer, startIdx: number, endIdx?: number) => {\n  const removed = renderer.panels.slice(startIdx, endIdx);\n\n  renderer.batchRemove({ index: startIdx, deleteCount: removed.length });\n};\n\n","import { FlickingOptions } from \"../Flicking\";\nimport { ALIGN } from \"../const/external\";\nimport { parseArithmeticExpression } from \"../utils\";\n\nexport default (align: FlickingOptions[\"align\"] = ALIGN.CENTER, horizontal: boolean = true, firstPanelSize?: string) => {\n  const cameraAlign = getCameraAlign(align);\n  const panelAlign = getPanelAlign(align);\n\n  if (panelAlign == null) return \"\";\n\n  const camPosition = `calc(${cameraAlign} - (${firstPanelSize || \"0px\"} * ${panelAlign.percentage}) - ${panelAlign.absolute}px)`;\n\n  return horizontal\n    ? `translate(${camPosition})`\n    : `translate(0, ${camPosition})`;\n};\n\nconst getCameraAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { camera: string | number }).camera\n    : align;\n\n  return parseAlign(alignVal);\n};\n\nconst getPanelAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { panel: string | number }).panel\n    : align;\n\n  return parseArithmeticExpression(parseAlign(alignVal));\n};\n\nconst parseAlign = (alignVal: number | string) => {\n  if (typeof alignVal === \"number\") {\n    return `${alignVal}px`;\n  }\n\n  switch (alignVal) {\n    case ALIGN.CENTER:\n      return \"50%\";\n    case ALIGN.NEXT:\n      return \"100%\";\n    case ALIGN.PREV:\n      return \"0%\";\n    default:\n      return alignVal;\n  }\n};\n","import Component from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nconst withFlickingMethods = (prototype: any, flickingName: string) => {\n  [Component.prototype, Flicking.prototype].forEach(proto => {\n    Object.getOwnPropertyNames(proto).filter(name => !prototype[name] && !name.startsWith(\"_\") && name !== \"constructor\")\n      .forEach((name: string) => {\n        const descriptor = Object.getOwnPropertyDescriptor(proto, name)!;\n\n        if (descriptor.value) {\n          // Public Function\n          Object.defineProperty(prototype, name, {\n            value: function(...args) {\n              return descriptor.value.call(this[flickingName], ...args);\n            }\n          });\n        } else {\n          const getterDescriptor: { get?: () => any; set?: (val: any) => void } = {};\n          if (descriptor.get) {\n            getterDescriptor.get = function() {\n              return descriptor.get?.call(this[flickingName]);\n            };\n          }\n          if (descriptor.set) {\n            getterDescriptor.set = function(...args) {\n              return descriptor.set?.call(this[flickingName], ...args);\n            };\n          }\n\n          Object.defineProperty(prototype, name, getterDescriptor);\n        }\n      });\n  });\n};\n\nexport default withFlickingMethods;\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\n\nexport default <T>(flicking: Flicking, diffResult: DiffResult<T>) => {\n  const removedPanels = diffResult.removed.reduce((map, idx) => {\n    map[idx] = true;\n    return map;\n  }, {});\n\n  return [\n    ...flicking.panels\n      .filter(panel => !removedPanels[panel.index])\n      // Sort panels by position\n      .sort((panel1, panel2) => (panel1.position + panel1.offset) - (panel2.position + panel2.offset))\n      .map(panel => diffResult.prevList[panel.index]),\n    ...diffResult.added.map(idx => diffResult.list[idx])\n  ];\n};\n\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"./Flicking\";\nimport * as Core from \"./core\";\nimport * as Camera from \"./camera\";\nimport * as Control from \"./control\";\nimport * as Renderer from \"./renderer\";\nimport * as Constants from \"./const/external\";\nimport * as CFC from \"./cfc\";\nimport { merge } from \"./utils\";\n\nmerge(Flicking, Core);\nmerge(Flicking, Camera);\nmerge(Flicking, Control);\nmerge(Flicking, Renderer);\nmerge(Flicking, Constants);\nmerge(Flicking, CFC);\n\nexport default Flicking;\n"],"names":["merge","target","_i","sources","forEach","source","Object","keys","key","getFlickingAttached","val","nameToThrowOnError","FlickingError","ERROR","NOT_ATTACHED_TO_FLICKING","toArray","iterable","slice","call","parseAlign","align","size","alignPoint","isString","ALIGN","PREV","CENTER","NEXT","parseArithmeticSize","WRONG_OPTION","cssValue","base","parsed","parseArithmeticExpression","percentage","absolute","getDirection","start","end","DIRECTION","NONE","parseElement","element","Array","isArray","elements","el","tempDiv","document","createElement","innerHTML","push","children","firstChild","removeChild","nodeType","Node","ELEMENT_NODE","WRONG_TYPE","getMinusCompensatedIndex","idx","max","clamp","includes","array","array_1","__values","circulatePosition","pos","min","getProgress","prev","next","getStyle","window","getComputedStyle","currentStyle","isBetween","CODE","ELEMENT_NOT_FOUND","VAL_MUST_NOT_NULL","INDEX_OUT_OF_RANGE","POSITION_NOT_REACHABLE","TRANSFORM_NOT_SUPPORTED","STOP_CALLED_BY_USER","ANIMATION_INTERRUPTED","ANIMATION_ALREADY_PLAYING","NOT_ALLOWED_IN_FRAMEWORK","NOT_INITIALIZED","NO_ACTIVE","MESSAGE","wrongVal","correctTypes","map","type","join","selector","name","optionName","position","EVENTS","READY","BEFORE_RESIZE","AFTER_RESIZE","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","WILL_CHANGE","CHANGED","WILL_RESTORE","RESTORED","SELECT","NEED_PANEL","VISIBLE_CHANGE","REACH_EDGE","PANEL_CHANGE","MOVE_TYPE","SNAP","FREE_SCROLL","STRICT","x","Math","cssRegex","matchResult","exec","sign","value","unit","parsedValue","parseFloat","signMultiplier","setPrototypeOf","obj","proto","__proto__","__extends","Error","message","code","_super","_this","prototype","this","_el","_width","_padding","left","right","_height","top","bottom","_a","width","height","padding","isBorderBoxSizing","_isBorderBoxSizing","style","newWidth","newHeight","resize","elStyle","clientWidth","clientHeight","paddingLeft","paddingRight","paddingTop","paddingBottom","boxSizing","STATE_TYPE","EVENT","HOLD","CHANGE","RELEASE","ANIMATION_END","FINISH","POSITION_KEY","_delta","prevState","ctx","camera","flicking","axesEvent","transitTo","delta","AXES","prevPosition","newPosition","circularEnabled","range","lookAt","moveEvent","ComponentEvent","isTrusted","holding","direction","trigger","isCanceled","DISABLED","renderer","panelCount","holdStartEvent","HOLDING","animatingContext","control","controller","moveStartEvent","ANIMATING","onChange","State","inputEvent","offset","horizontal","offsetX","offsetY","DRAGGING","flick","setTo","IDLE","_releaseEvent","clickedElement","srcEvent","touch","changedTouches","elementFromPoint","clientX","clientY","cameraPosition","clickedPanelPosition","panels","clickedPanel","panels_1","panel","contains","index","_moveToChangedPosition","destPos","duration","moveToPosition","updateInput","stop","_state","eventType","externalCtx","currentState","onHold","onRelease","onAnimationEnd","onFinish","nextStateType","nextState","IdleState","HoldingState","DraggingState","AnimatingState","DisabledState","onEnter","_axes","_stateMachine","state","_animatingContext","axes","circular","axis","_panInput","isEnable","get","bounce","_flicking","Axes","deceleration","interruptable","easing","PanInput","viewport","inputType","iOSEdgeSwipeThreshold","scale","releaseOnScroll","connect","on","e","fire","removePreventClickHandler","destroy","_resetInternalValues","enable","disable","controlParams","parsedVal","axm","set","cameraEl","_onAxesHold","_onAxesChange","addEventListener","_preventClickWhenDragged","off","removeEventListener","Promise","reject","startPos","animate","once","resolve","interruptionHandler","animationFinishHandler","newPos","_dragged","preventDefault","stopPropagation","StateMachine","_controller","_activePanel","animating","init","_progressInPanel","activePanel","clampToReachablePosition","update","_b","nearestAnchor","findNearestAnchor","removed","canReach","camPos_1","camRangeDiff","rangeDiff","filter","reduce","nearestPosition","abs","Infinity","_triggerIndexChangeEvent","_animateToPosition","newActivePanel","triggeringEvent","event","currentPanel","animateTo","animation","_setActive","then","render","catch","err","prevActivePanel","updateAdaptiveHeight","prevIndex","prevPanel","AxesController","_index","_pos","_panel","_c","count","_count","activeAnchor","findActiveAnchor","anchorAtCamera","snapThreshold","_calcSnapThreshold","posDelta","absPosDelta","snapDelta","targetAnchor","_findSnappedAnchor","threshold","_findAdjacentAnchor","currentPos","clampedPosition","anchorAtPosition","findAnchorIncludePosition","isFinite","anchors","anchorPoints","loopCount","floor","anchorAtPositionIndex","anchor","AnchorPoint","loop","length","getNextAnchor","getPrevAnchor","isNextDirection","panelSize","alignPos","alignPosition","margin","Control","stopAtEdge","_stopAtEdge","progressInPanel","panelRange","targetPos","targetPanel","_resetIndexRange","cameraRange","currentIndex","prevPanelIndex","nextPanelIndex","nextPanel","prevPos","nextPos","_indexRange","axesRange","indexRange","isOverThreshold","adjacentAnchor","firstAnchor","lastAnchor","shouldBounceToFirst","shouldBounceToLast","_position","_alignPos","_offset","_range","_visiblePanels","_anchors","NaN","nearestPanel","panelPos","bounceSize","prevRange","nextRange","nextPosition","_align","viewportEl","nameOnErrMsg","checkExistence","firstElementChild","_checkTranslateSupport","_refreshVisiblePanels","_checkNeedPanel","_checkReachEnd","_applyTransform","includePosition","nearest","prevDist","anchorIdx","dist","activeIndex","checker","array_2","find","visibleRange","includeRange","alignVal","adaptive","setSize","unRenderedPanels","rendered","sizeIncludingMargin","_needPanelTriggered","newVisiblePanels","canSee","prevVisiblePanels","added","visiblePanels","needPanelTriggered","cameraSize","needPanelThreshold","cameraPrev","cameraNext","firstPanel","lastPanel","wasBetweenRange","isBetweenRange","actualPosition","_transform","supportedStyle","documentElement","transformName","transforms_1","prefixedTransform","Camera","getPanel","_circularOffset","_circularEnabled","positionInRange","anchorInRange","visibleInCurrentRange","firstPanelPrev","lastPanelNext","visibleSize","panelSizeSum","canSetCircularMode","every","updateCircularToggleDirection","_updateCircularOffset","toggled","toggle","some","isToggled","sum","toggledPrev","toggledNext","toggleDirection","_calcPanelAreaSum","viewportSize","firstPos","lastPos","shouldPrependBoundAnchor","shouldAppendBoundAnchor","indexOffset_1","panelAtMin","reachablePanels","newAnchors","splice","panelAtMax","nearestPanelAtMin","_findNearestPanel","panelIdx","_panels","panelAlign","_getPanelAlign","_collectPanels","panelsPerView","_updatePanelSizeByGrid","items","allPanelsInserted","addedPanels","item","insertingIdx","panelsPushed","panelsInserted","_createPanel","insertedSize","_getPanelSizeSum","increaseIndex","increasePosition","_insertPanelElements","_updateCameraAndControl","moveToPanel","updateOffset","allPanelsRemoved","deleteCount","removingIdx","panelsPulled","panelsRemoved","removedSize","decreaseIndex","decreasePosition","_removePanelElements","resetActive","marginDiff","updateRange","updateAnchors","resetNeedPanelHistory","renderOnlyVisible","_showOnlyVisiblePanels","markForShow","visibleIndexes","visibles","markForHide","panelSizeObj","firstPanelSizeObj","noPanelStyleOverride","_size","_margin","_removed","_toggled","_toggleDirection","cameraRangeDiff","progress","camPos","disappearPosNext","disappearPosPrev","checkingRange","cached","offsetWidth","offsetHeight","marginLeft","marginRight","marginTop","marginBottom","_updateAlignPos","_resetInternalStates","includeMargin","moveTo","_moveBy","togglePosition","_togglePosition","prevToggled","camRange","camAlignPosition","camVisibleRange","camVisibleSize","minimumVisible","maximumVisible","shouldBeVisibleAtMin","shouldBeVisibleAtMax","options","_rendered","Panel","wasRenderedPanels","parentElement","_updateRenderingPanels","renderingPanels","_getRenderingPanelsByOrder","_resetPanelElementOrder","cameraElement","fragment","createDocumentFragment","appendChild","_removeAllChildsFromCamera","childNodes","node","TEXT_NODE","cameraChilds","ElementPanel","nextSibling","nextSiblingElement","insertBefore","reversedPanels","__spreadArray","reverse","nextPanelEl","nextElementSibling","sort","a","b","Renderer","root","_d","defaultIndex","_e","_f","_g","bound","_h","_j","_k","_l","_m","preventEventsBeforeInit","_o","_p","_q","pow","_r","_s","moveType","_t","_u","_v","_w","_x","preventClickOnDrag","_y","disableOnInit","_z","_0","autoInit","_1","autoResize","_2","renderExternal","_initialized","_plugins","_defaultIndex","_horizontal","_circular","_bound","_adaptive","_panelsPerView","_noPanelStyleOverride","_needPanelThreshold","_preventEventsBeforeInit","_deceleration","_duration","_easing","_inputType","_moveType","_threshold","_interruptable","_bounce","_iOSEdgeSwipeThreshold","_preventClickOnDrag","_disableOnInit","_renderOnlyVisible","_autoResize","_autoInit","_renderExternal","_viewport","Viewport","parent","targetEl","queryResult","querySelector","getElement","_renderer","_createRenderer","_camera","_createCamera","_control","_createControl","bind","addPreventClickHandler","originalTrigger","_moveToInitialPanel","disableInput","plugin","includePanelHTML","visiblePanelsOnly","status","panelInfo","html","outerHTML","getProgressInPanel","visibleOffset","batchRemove","batchInsert","newCameraPos","plugins","foundIndex","findIndex","prevWidth","prevHeight","prevProgressInPanel","forceRenderAllPanels","updatePanelSize","updateAlignPos","updatePosition","sizeChanged","insert","moveTypes","moveTypeStr","moveTypeOptions","JSON","stringify","SnapControl","FreeControl","StrictControl","cameraOption","console","warn","CircularCamera","BoundCamera","LinearCamera","rendererOptions","VanillaRenderer","initialPanel","Flicking","Component","_externalComponent","externalComponent","diffResult","startIdx","endIdx","elIdx","prevList","flickingName","getOwnPropertyNames","startsWith","getterDescriptor","descriptor","getOwnPropertyDescriptor","defineProperty","args","endIdx_1","prevIdx_1","startIdx_1","prevIdx_2","removedIdx","ordered","__read","prevIdx","newIdx","indexDiff","addedIdx","removedPanels","panel1","panel2","list","firstPanelSize","cameraAlign","camPosition","Constants","CFC"],"mappings":"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"}